/* tslint:disable */
/* eslint-disable */
/**
 * CoinGecko Public API V3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AssetPlatforms,
} from '../models/index';
import {
    AssetPlatformsFromJSON,
    AssetPlatformsToJSON,
} from '../models/index';

export interface AssetPlatformsListRequest {
    filter?: AssetPlatformsListFilterEnum;
}

/**
 * AssetPlatformsApi - interface
 * 
 * @export
 * @interface AssetPlatformsApiInterface
 */
export interface AssetPlatformsApiInterface {
    /**
     * This endpoint allows you to **query all the asset platforms on CoinGecko**.
     * @summary Asset Platforms List (ID Map)
     * @param {'nft'} [filter] apply relevant filters to results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetPlatformsApiInterface
     */
    assetPlatformsListRaw(requestParameters: AssetPlatformsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetPlatforms>>;

    /**
     * This endpoint allows you to **query all the asset platforms on CoinGecko**.
     * Asset Platforms List (ID Map)
     */
    assetPlatformsList(requestParameters: AssetPlatformsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetPlatforms>;

}

/**
 * 
 */
export class AssetPlatformsApi extends runtime.BaseAPI implements AssetPlatformsApiInterface {

    /**
     * This endpoint allows you to **query all the asset platforms on CoinGecko**.
     * Asset Platforms List (ID Map)
     */
    async assetPlatformsListRaw(requestParameters: AssetPlatformsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetPlatforms>> {
        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_demo_api_key"] = await this.configuration.apiKey("x_cg_demo_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-demo-api-key"] = await this.configuration.apiKey("x-cg-demo-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/asset_platforms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetPlatformsFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to **query all the asset platforms on CoinGecko**.
     * Asset Platforms List (ID Map)
     */
    async assetPlatformsList(requestParameters: AssetPlatformsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetPlatforms> {
        const response = await this.assetPlatformsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AssetPlatformsListFilterEnum = {
    Nft: 'nft'
} as const;
export type AssetPlatformsListFilterEnum = typeof AssetPlatformsListFilterEnum[keyof typeof AssetPlatformsListFilterEnum];
