/* tslint:disable */
/* eslint-disable */
/**
 * CoinGecko Public API V3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  NFTData,
  NFTList,
} from '../models/index';
import {
    NFTDataFromJSON,
    NFTDataToJSON,
    NFTListFromJSON,
    NFTListToJSON,
} from '../models/index';

export interface NftsContractAddressRequest {
    assetPlatformId: string;
    contractAddress: string;
}

export interface NftsIdRequest {
    id: string;
}

export interface NftsListRequest {
    order?: NftsListOrderEnum;
    perPage?: number;
    page?: number;
}

/**
 * 
 */
export class NFTsBetaApi extends runtime.BaseAPI {

    /**
     * This endpoint allows you to **query all the NFT data (name, floor price, 24 hr volume....) based on the nft collection contract address and respective asset platform**.
     * NFTs Collection Data by Contract Address
     */
    async nftsContractAddressRaw(requestParameters: NftsContractAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NFTData>> {
        if (requestParameters['assetPlatformId'] == null) {
            throw new runtime.RequiredError(
                'assetPlatformId',
                'Required parameter "assetPlatformId" was null or undefined when calling nftsContractAddress().'
            );
        }

        if (requestParameters['contractAddress'] == null) {
            throw new runtime.RequiredError(
                'contractAddress',
                'Required parameter "contractAddress" was null or undefined when calling nftsContractAddress().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_demo_api_key"] = await this.configuration.apiKey("x_cg_demo_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-demo-api-key"] = await this.configuration.apiKey("x-cg-demo-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/nfts/{asset_platform_id}/contract/{contract_address}`.replace(`{${"asset_platform_id"}}`, encodeURIComponent(String(requestParameters['assetPlatformId']))).replace(`{${"contract_address"}}`, encodeURIComponent(String(requestParameters['contractAddress']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NFTDataFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to **query all the NFT data (name, floor price, 24 hr volume....) based on the nft collection contract address and respective asset platform**.
     * NFTs Collection Data by Contract Address
     */
    async nftsContractAddress(requestParameters: NftsContractAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NFTData> {
        const response = await this.nftsContractAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to **query all the NFT data (name, floor price, 24 hr volume....) based on the nft collection id**.
     * NFTs Collection Data by ID
     */
    async nftsIdRaw(requestParameters: NftsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NFTData>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling nftsId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_demo_api_key"] = await this.configuration.apiKey("x_cg_demo_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-demo-api-key"] = await this.configuration.apiKey("x-cg-demo-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/nfts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NFTDataFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to **query all the NFT data (name, floor price, 24 hr volume....) based on the nft collection id**.
     * NFTs Collection Data by ID
     */
    async nftsId(requestParameters: NftsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NFTData> {
        const response = await this.nftsIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to **query all supported NFTs with id, contract address, name, asset platform id and symbol on CoinGecko**.
     * NFTs List (ID Map)
     */
    async nftsListRaw(requestParameters: NftsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NFTList>> {
        const queryParameters: any = {};

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['per_page'] = requestParameters['perPage'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_demo_api_key"] = await this.configuration.apiKey("x_cg_demo_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-demo-api-key"] = await this.configuration.apiKey("x-cg-demo-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/nfts/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NFTListFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to **query all supported NFTs with id, contract address, name, asset platform id and symbol on CoinGecko**.
     * NFTs List (ID Map)
     */
    async nftsList(requestParameters: NftsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NFTList> {
        const response = await this.nftsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const NftsListOrderEnum = {
    H24VolumeUsdAsc: 'h24_volume_usd_asc',
    H24VolumeUsdDesc: 'h24_volume_usd_desc',
    H24VolumeNativeAsc: 'h24_volume_native_asc',
    H24VolumeNativeDesc: 'h24_volume_native_desc',
    FloorPriceNativeAsc: 'floor_price_native_asc',
    FloorPriceNativeDesc: 'floor_price_native_desc',
    MarketCapNativeAsc: 'market_cap_native_asc',
    MarketCapNativeDesc: 'market_cap_native_desc',
    MarketCapUsdAsc: 'market_cap_usd_asc',
    MarketCapUsdDesc: 'market_cap_usd_desc'
} as const;
export type NftsListOrderEnum = typeof NftsListOrderEnum[keyof typeof NftsListOrderEnum];
