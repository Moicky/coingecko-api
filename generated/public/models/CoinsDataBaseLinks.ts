/* tslint:disable */
/* eslint-disable */
/**
 * CoinGecko Public API V3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoinsDataBaseLinksReposUrl } from './CoinsDataBaseLinksReposUrl';
import {
    CoinsDataBaseLinksReposUrlFromJSON,
    CoinsDataBaseLinksReposUrlFromJSONTyped,
    CoinsDataBaseLinksReposUrlToJSON,
    CoinsDataBaseLinksReposUrlToJSONTyped,
} from './CoinsDataBaseLinksReposUrl';

/**
 * links
 * @export
 * @interface CoinsDataBaseLinks
 */
export interface CoinsDataBaseLinks {
    /**
     * coin website url
     * @type {Array<string>}
     * @memberof CoinsDataBaseLinks
     */
    homepage?: Array<string>;
    /**
     * coin whitepaper url
     * @type {Array<string>}
     * @memberof CoinsDataBaseLinks
     */
    whitepaper?: Array<string>;
    /**
     * coin block explorer url
     * @type {Array<string>}
     * @memberof CoinsDataBaseLinks
     */
    blockchainSite?: Array<string>;
    /**
     * coin official forum url
     * @type {Array<string>}
     * @memberof CoinsDataBaseLinks
     */
    officialForumUrl?: Array<string>;
    /**
     * coin chat url
     * @type {Array<string>}
     * @memberof CoinsDataBaseLinks
     */
    chatUrl?: Array<string>;
    /**
     * coin announcement url
     * @type {Array<string>}
     * @memberof CoinsDataBaseLinks
     */
    announcementUrl?: Array<string>;
    /**
     * coin twitter handle
     * @type {string}
     * @memberof CoinsDataBaseLinks
     */
    twitterScreenName?: string;
    /**
     * coin facebook username
     * @type {string}
     * @memberof CoinsDataBaseLinks
     */
    facebookUsername?: string;
    /**
     * coin bitcointalk thread identifier
     * @type {string}
     * @memberof CoinsDataBaseLinks
     */
    bitcointalkThreadIdentifier?: string;
    /**
     * coin telegram channel identifier
     * @type {string}
     * @memberof CoinsDataBaseLinks
     */
    telegramChannelIdentifier?: string;
    /**
     * coin subreddit url
     * @type {string}
     * @memberof CoinsDataBaseLinks
     */
    subredditUrl?: string;
    /**
     * 
     * @type {CoinsDataBaseLinksReposUrl}
     * @memberof CoinsDataBaseLinks
     */
    reposUrl?: CoinsDataBaseLinksReposUrl;
}

/**
 * Check if a given object implements the CoinsDataBaseLinks interface.
 */
export function instanceOfCoinsDataBaseLinks(value: object): value is CoinsDataBaseLinks {
    return true;
}

export function CoinsDataBaseLinksFromJSON(json: any): CoinsDataBaseLinks {
    return CoinsDataBaseLinksFromJSONTyped(json, false);
}

export function CoinsDataBaseLinksFromJSONTyped(json: any, ignoreDiscriminator: boolean): CoinsDataBaseLinks {
    if (json == null) {
        return json;
    }
    return {
        
        'homepage': json['homepage'] == null ? undefined : json['homepage'],
        'whitepaper': json['whitepaper'] == null ? undefined : json['whitepaper'],
        'blockchainSite': json['blockchain_site'] == null ? undefined : json['blockchain_site'],
        'officialForumUrl': json['official_forum_url'] == null ? undefined : json['official_forum_url'],
        'chatUrl': json['chat_url'] == null ? undefined : json['chat_url'],
        'announcementUrl': json['announcement_url'] == null ? undefined : json['announcement_url'],
        'twitterScreenName': json['twitter_screen_name'] == null ? undefined : json['twitter_screen_name'],
        'facebookUsername': json['facebook_username'] == null ? undefined : json['facebook_username'],
        'bitcointalkThreadIdentifier': json['bitcointalk_thread_identifier'] == null ? undefined : json['bitcointalk_thread_identifier'],
        'telegramChannelIdentifier': json['telegram_channel_identifier'] == null ? undefined : json['telegram_channel_identifier'],
        'subredditUrl': json['subreddit_url'] == null ? undefined : json['subreddit_url'],
        'reposUrl': json['repos_url'] == null ? undefined : CoinsDataBaseLinksReposUrlFromJSON(json['repos_url']),
    };
}

  export function CoinsDataBaseLinksToJSON(json: any): CoinsDataBaseLinks {
      return CoinsDataBaseLinksToJSONTyped(json, false);
  }

  export function CoinsDataBaseLinksToJSONTyped(value?: CoinsDataBaseLinks | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'homepage': value['homepage'],
        'whitepaper': value['whitepaper'],
        'blockchain_site': value['blockchainSite'],
        'official_forum_url': value['officialForumUrl'],
        'chat_url': value['chatUrl'],
        'announcement_url': value['announcementUrl'],
        'twitter_screen_name': value['twitterScreenName'],
        'facebook_username': value['facebookUsername'],
        'bitcointalk_thread_identifier': value['bitcointalkThreadIdentifier'],
        'telegram_channel_identifier': value['telegramChannelIdentifier'],
        'subreddit_url': value['subredditUrl'],
        'repos_url': CoinsDataBaseLinksReposUrlToJSON(value['reposUrl']),
    };
}

