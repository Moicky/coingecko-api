/* tslint:disable */
/* eslint-disable */
/**
 * CoinGecko Public API V3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Categories
 */
export interface Categories {
    /**
     * category id
     * @type {string}
     * @memberof Categories
     */
    id?: string;
    /**
     * category name
     * @type {string}
     * @memberof Categories
     */
    name?: string;
    /**
     * category market cap
     * @type {number}
     * @memberof Categories
     */
    marketCap?: number;
    /**
     * category market cap change in 24 hours
     * @type {number}
     * @memberof Categories
     */
    marketCapChange24h?: number;
    /**
     * category description
     * @type {string}
     * @memberof Categories
     */
    content?: string;
    /**
     * ids of top 3 coins in the category
     * @type {Array<string>}
     * @memberof Categories
     */
    top3CoinsId?: Array<string>;
    /**
     * images of top 3 coins in the category
     * @type {Array<string>}
     * @memberof Categories
     */
    top3Coins?: Array<string>;
    /**
     * category volume in 24 hours
     * @type {number}
     * @memberof Categories
     */
    volume24h?: number;
    /**
     * category last updated time
     * @type {string}
     * @memberof Categories
     */
    updatedAt?: string;
}

/**
 * Check if a given object implements the Categories interface.
 */
export function instanceOfCategories(value: object): value is Categories {
    return true;
}

export function CategoriesFromJSON(json: any): Categories {
    return CategoriesFromJSONTyped(json, false);
}

export function CategoriesFromJSONTyped(json: any, ignoreDiscriminator: boolean): Categories {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'marketCap': json['market_cap'] == null ? undefined : json['market_cap'],
        'marketCapChange24h': json['market_cap_change_24h'] == null ? undefined : json['market_cap_change_24h'],
        'content': json['content'] == null ? undefined : json['content'],
        'top3CoinsId': json['top_3_coins_id'] == null ? undefined : json['top_3_coins_id'],
        'top3Coins': json['top_3_coins'] == null ? undefined : json['top_3_coins'],
        'volume24h': json['volume_24h'] == null ? undefined : json['volume_24h'],
        'updatedAt': json['updated_at'] == null ? undefined : json['updated_at'],
    };
}

  export function CategoriesToJSON(json: any): Categories {
      return CategoriesToJSONTyped(json, false);
  }

  export function CategoriesToJSONTyped(value?: Categories | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'market_cap': value['marketCap'],
        'market_cap_change_24h': value['marketCapChange24h'],
        'content': value['content'],
        'top_3_coins_id': value['top3CoinsId'],
        'top_3_coins': value['top3Coins'],
        'volume_24h': value['volume24h'],
        'updated_at': value['updatedAt'],
    };
}

