/* tslint:disable */
/* eslint-disable */
/**
 * CoinGecko Pro API V3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoinsTickers } from './CoinsTickers';
import {
    CoinsTickersFromJSON,
    CoinsTickersFromJSONTyped,
    CoinsTickersToJSON,
    CoinsTickersToJSONTyped,
} from './CoinsTickers';

/**
 * 
 * @export
 * @interface ExchangeData
 */
export interface ExchangeData {
    /**
     * exchange name
     * @type {string}
     * @memberof ExchangeData
     */
    name?: string;
    /**
     * exchange established year
     * @type {number}
     * @memberof ExchangeData
     */
    yearEstablished?: number;
    /**
     * exchange incorporated country
     * @type {string}
     * @memberof ExchangeData
     */
    country?: string;
    /**
     * exchange description
     * @type {string}
     * @memberof ExchangeData
     */
    description?: string;
    /**
     * exchange website url
     * @type {string}
     * @memberof ExchangeData
     */
    url?: string;
    /**
     * exchange image url
     * @type {string}
     * @memberof ExchangeData
     */
    image?: string;
    /**
     * exchange facebook url
     * @type {string}
     * @memberof ExchangeData
     */
    facebookUrl?: string;
    /**
     * exchange reddit url
     * @type {string}
     * @memberof ExchangeData
     */
    redditUrl?: string;
    /**
     * exchange telegram url
     * @type {string}
     * @memberof ExchangeData
     */
    telegramUrl?: string;
    /**
     * exchange slack url
     * @type {string}
     * @memberof ExchangeData
     */
    slackUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof ExchangeData
     */
    otherUrl1?: string;
    /**
     * 
     * @type {string}
     * @memberof ExchangeData
     */
    otherUrl2?: string;
    /**
     * exchange twitter handle
     * @type {string}
     * @memberof ExchangeData
     */
    twitterHandle?: string;
    /**
     * exchange trading incentive
     * @type {boolean}
     * @memberof ExchangeData
     */
    hasTradingIncentive?: boolean;
    /**
     * exchange type (true for centralized, false for decentralized)
     * @type {boolean}
     * @memberof ExchangeData
     */
    centralized?: boolean;
    /**
     * public notice for exchange
     * @type {string}
     * @memberof ExchangeData
     */
    publicNotice?: string;
    /**
     * alert notice for exchange
     * @type {string}
     * @memberof ExchangeData
     */
    alertNotice?: string;
    /**
     * exchange trust score
     * @type {number}
     * @memberof ExchangeData
     */
    trustScore?: number;
    /**
     * exchange trust score rank
     * @type {number}
     * @memberof ExchangeData
     */
    trustScoreRank?: number;
    /**
     * 
     * @type {number}
     * @memberof ExchangeData
     */
    tradeVolume24hBtc?: number;
    /**
     * normalized trading volume by traffic in BTC in 24 hours <br>*refers to [`this blog`](https://blog.coingecko.com/trust-score/).
     * @type {number}
     * @memberof ExchangeData
     */
    tradeVolume24hBtcNormalized?: number;
    /**
     * 
     * @type {Array<CoinsTickers>}
     * @memberof ExchangeData
     */
    tickers?: Array<CoinsTickers>;
}

/**
 * Check if a given object implements the ExchangeData interface.
 */
export function instanceOfExchangeData(value: object): value is ExchangeData {
    return true;
}

export function ExchangeDataFromJSON(json: any): ExchangeData {
    return ExchangeDataFromJSONTyped(json, false);
}

export function ExchangeDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExchangeData {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'] == null ? undefined : json['name'],
        'yearEstablished': json['year_established'] == null ? undefined : json['year_established'],
        'country': json['country'] == null ? undefined : json['country'],
        'description': json['description'] == null ? undefined : json['description'],
        'url': json['url'] == null ? undefined : json['url'],
        'image': json['image'] == null ? undefined : json['image'],
        'facebookUrl': json['facebook_url'] == null ? undefined : json['facebook_url'],
        'redditUrl': json['reddit_url'] == null ? undefined : json['reddit_url'],
        'telegramUrl': json['telegram_url'] == null ? undefined : json['telegram_url'],
        'slackUrl': json['slack_url'] == null ? undefined : json['slack_url'],
        'otherUrl1': json['other_url_1'] == null ? undefined : json['other_url_1'],
        'otherUrl2': json['other_url_2'] == null ? undefined : json['other_url_2'],
        'twitterHandle': json['twitter_handle'] == null ? undefined : json['twitter_handle'],
        'hasTradingIncentive': json['has_trading_incentive'] == null ? undefined : json['has_trading_incentive'],
        'centralized': json['centralized'] == null ? undefined : json['centralized'],
        'publicNotice': json['public_notice'] == null ? undefined : json['public_notice'],
        'alertNotice': json['alert_notice'] == null ? undefined : json['alert_notice'],
        'trustScore': json['trust_score'] == null ? undefined : json['trust_score'],
        'trustScoreRank': json['trust_score_rank'] == null ? undefined : json['trust_score_rank'],
        'tradeVolume24hBtc': json['trade_volume_24h_btc'] == null ? undefined : json['trade_volume_24h_btc'],
        'tradeVolume24hBtcNormalized': json['trade_volume_24h_btc_normalized'] == null ? undefined : json['trade_volume_24h_btc_normalized'],
        'tickers': json['tickers'] == null ? undefined : ((json['tickers'] as Array<any>).map(CoinsTickersFromJSON)),
    };
}

  export function ExchangeDataToJSON(json: any): ExchangeData {
      return ExchangeDataToJSONTyped(json, false);
  }

  export function ExchangeDataToJSONTyped(value?: ExchangeData | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'year_established': value['yearEstablished'],
        'country': value['country'],
        'description': value['description'],
        'url': value['url'],
        'image': value['image'],
        'facebook_url': value['facebookUrl'],
        'reddit_url': value['redditUrl'],
        'telegram_url': value['telegramUrl'],
        'slack_url': value['slackUrl'],
        'other_url_1': value['otherUrl1'],
        'other_url_2': value['otherUrl2'],
        'twitter_handle': value['twitterHandle'],
        'has_trading_incentive': value['hasTradingIncentive'],
        'centralized': value['centralized'],
        'public_notice': value['publicNotice'],
        'alert_notice': value['alertNotice'],
        'trust_score': value['trustScore'],
        'trust_score_rank': value['trustScoreRank'],
        'trade_volume_24h_btc': value['tradeVolume24hBtc'],
        'trade_volume_24h_btc_normalized': value['tradeVolume24hBtcNormalized'],
        'tickers': value['tickers'] == null ? undefined : ((value['tickers'] as Array<any>).map(CoinsTickersToJSON)),
    };
}

