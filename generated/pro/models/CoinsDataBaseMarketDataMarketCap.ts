/* tslint:disable */
/* eslint-disable */
/**
 * CoinGecko Pro API V3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * coin market cap in currency
 * @export
 * @interface CoinsDataBaseMarketDataMarketCap
 */
export interface CoinsDataBaseMarketDataMarketCap {
    /**
     * 
     * @type {number}
     * @memberof CoinsDataBaseMarketDataMarketCap
     */
    btc?: number;
    /**
     * 
     * @type {number}
     * @memberof CoinsDataBaseMarketDataMarketCap
     */
    eur?: number;
    /**
     * 
     * @type {number}
     * @memberof CoinsDataBaseMarketDataMarketCap
     */
    usd?: number;
}

/**
 * Check if a given object implements the CoinsDataBaseMarketDataMarketCap interface.
 */
export function instanceOfCoinsDataBaseMarketDataMarketCap(value: object): value is CoinsDataBaseMarketDataMarketCap {
    return true;
}

export function CoinsDataBaseMarketDataMarketCapFromJSON(json: any): CoinsDataBaseMarketDataMarketCap {
    return CoinsDataBaseMarketDataMarketCapFromJSONTyped(json, false);
}

export function CoinsDataBaseMarketDataMarketCapFromJSONTyped(json: any, ignoreDiscriminator: boolean): CoinsDataBaseMarketDataMarketCap {
    if (json == null) {
        return json;
    }
    return {
        
        'btc': json['btc'] == null ? undefined : json['btc'],
        'eur': json['eur'] == null ? undefined : json['eur'],
        'usd': json['usd'] == null ? undefined : json['usd'],
    };
}

  export function CoinsDataBaseMarketDataMarketCapToJSON(json: any): CoinsDataBaseMarketDataMarketCap {
      return CoinsDataBaseMarketDataMarketCapToJSONTyped(json, false);
  }

  export function CoinsDataBaseMarketDataMarketCapToJSONTyped(value?: CoinsDataBaseMarketDataMarketCap | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'btc': value['btc'],
        'eur': value['eur'],
        'usd': value['usd'],
    };
}

