/* tslint:disable */
/* eslint-disable */
/**
 * CoinGecko Pro API V3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface NFTList
 */
export interface NFTList {
    /**
     * nft collection id
     * @type {string}
     * @memberof NFTList
     */
    id?: string;
    /**
     * nft collection contract address
     * @type {string}
     * @memberof NFTList
     */
    contractAddress?: string;
    /**
     * nft collection name
     * @type {string}
     * @memberof NFTList
     */
    name?: string;
    /**
     * nft collection asset platform id
     * @type {string}
     * @memberof NFTList
     */
    assetPlatformId?: string;
    /**
     * nft collection symbol
     * @type {string}
     * @memberof NFTList
     */
    symbol?: string;
}

/**
 * Check if a given object implements the NFTList interface.
 */
export function instanceOfNFTList(value: object): value is NFTList {
    return true;
}

export function NFTListFromJSON(json: any): NFTList {
    return NFTListFromJSONTyped(json, false);
}

export function NFTListFromJSONTyped(json: any, ignoreDiscriminator: boolean): NFTList {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'contractAddress': json['contract_address'] == null ? undefined : json['contract_address'],
        'name': json['name'] == null ? undefined : json['name'],
        'assetPlatformId': json['asset_platform_id'] == null ? undefined : json['asset_platform_id'],
        'symbol': json['symbol'] == null ? undefined : json['symbol'],
    };
}

  export function NFTListToJSON(json: any): NFTList {
      return NFTListToJSONTyped(json, false);
  }

  export function NFTListToJSONTyped(value?: NFTList | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'contract_address': value['contractAddress'],
        'name': value['name'],
        'asset_platform_id': value['assetPlatformId'],
        'symbol': value['symbol'],
    };
}

