/* tslint:disable */
/* eslint-disable */
/**
 * CoinGecko Pro API V3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TokenListsTokensInner } from './TokenListsTokensInner';
import {
    TokenListsTokensInnerFromJSON,
    TokenListsTokensInnerFromJSONTyped,
    TokenListsTokensInnerToJSON,
    TokenListsTokensInnerToJSONTyped,
} from './TokenListsTokensInner';

/**
 * 
 * @export
 * @interface TokenLists
 */
export interface TokenLists {
    /**
     * 
     * @type {string}
     * @memberof TokenLists
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenLists
     */
    logoURI?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof TokenLists
     */
    keywords?: Array<string>;
    /**
     * 
     * @type {Date}
     * @memberof TokenLists
     */
    timestamp?: Date;
    /**
     * 
     * @type {Array<TokenListsTokensInner>}
     * @memberof TokenLists
     */
    tokens?: Array<TokenListsTokensInner>;
}

/**
 * Check if a given object implements the TokenLists interface.
 */
export function instanceOfTokenLists(value: object): value is TokenLists {
    return true;
}

export function TokenListsFromJSON(json: any): TokenLists {
    return TokenListsFromJSONTyped(json, false);
}

export function TokenListsFromJSONTyped(json: any, ignoreDiscriminator: boolean): TokenLists {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'] == null ? undefined : json['name'],
        'logoURI': json['logoURI'] == null ? undefined : json['logoURI'],
        'keywords': json['keywords'] == null ? undefined : json['keywords'],
        'timestamp': json['timestamp'] == null ? undefined : (new Date(json['timestamp'])),
        'tokens': json['tokens'] == null ? undefined : ((json['tokens'] as Array<any>).map(TokenListsTokensInnerFromJSON)),
    };
}

  export function TokenListsToJSON(json: any): TokenLists {
      return TokenListsToJSONTyped(json, false);
  }

  export function TokenListsToJSONTyped(value?: TokenLists | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'logoURI': value['logoURI'],
        'keywords': value['keywords'],
        'timestamp': value['timestamp'] == null ? undefined : ((value['timestamp']).toISOString()),
        'tokens': value['tokens'] == null ? undefined : ((value['tokens'] as Array<any>).map(TokenListsTokensInnerToJSON)),
    };
}

