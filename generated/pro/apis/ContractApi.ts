/* tslint:disable */
/* eslint-disable */
/**
 * CoinGecko Pro API V3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoinsContractAddress,
  CoinsMarketChart,
  CoinsMarketChartRange,
} from '../models/index';
import {
    CoinsContractAddressFromJSON,
    CoinsContractAddressToJSON,
    CoinsMarketChartFromJSON,
    CoinsMarketChartToJSON,
    CoinsMarketChartRangeFromJSON,
    CoinsMarketChartRangeToJSON,
} from '../models/index';

export interface CoinsContractAddressRequest {
    id: string;
    contractAddress: string;
}

export interface ContractAddressMarketChartRequest {
    id: string;
    contractAddress: string;
    vsCurrency: string;
    days: string;
    interval?: ContractAddressMarketChartIntervalEnum;
    precision?: ContractAddressMarketChartPrecisionEnum;
}

export interface ContractAddressMarketChartRangeRequest {
    id: string;
    contractAddress: string;
    vsCurrency: string;
    from: number;
    to: number;
    interval?: ContractAddressMarketChartRangeIntervalEnum;
    precision?: ContractAddressMarketChartRangePrecisionEnum;
}

/**
 * ContractApi - interface
 * 
 * @export
 * @interface ContractApiInterface
 */
export interface ContractApiInterface {
    /**
     * This endpoint allows you to **query all the coin data (name, price, market .... including exchange tickers) on CoinGecko coin page based on asset platform and particular token contract address**.
     * @summary Coin Data by Token Address
     * @param {string} id asset platform id &lt;br&gt; *refers to [&#x60;/asset_platforms&#x60;](/reference/asset-platforms-list).
     * @param {string} contractAddress the contract address of token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractApiInterface
     */
    coinsContractAddressRaw(requestParameters: CoinsContractAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoinsContractAddress>>;

    /**
     * This endpoint allows you to **query all the coin data (name, price, market .... including exchange tickers) on CoinGecko coin page based on asset platform and particular token contract address**.
     * Coin Data by Token Address
     */
    coinsContractAddress(requestParameters: CoinsContractAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoinsContractAddress>;

    /**
     * This endpoint allows you to **get the historical chart data including time in UNIX, price, market cap and 24hrs volume based on asset platform and particular token contract address**.
     * @summary Coin Historical Chart Data by Token Address
     * @param {string} id asset platform id &lt;br&gt; *refers to [&#x60;/asset_platforms&#x60;](/reference/asset-platforms-list).
     * @param {string} contractAddress the contract address of token
     * @param {string} vsCurrency target currency of market data &lt;br&gt; *refers to [&#x60;/simple/supported_vs_currencies&#x60;](/reference/simple-supported-currencies).
     * @param {string} days data up to number of days ago &lt;br&gt; you may use any integer or &#x60;max&#x60; for number of days
     * @param {'5m' | 'hourly' | 'daily'} [interval] data interval, leave empty for auto granularity
     * @param {'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18'} [precision] decimal place for currency price value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractApiInterface
     */
    contractAddressMarketChartRaw(requestParameters: ContractAddressMarketChartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoinsMarketChart>>;

    /**
     * This endpoint allows you to **get the historical chart data including time in UNIX, price, market cap and 24hrs volume based on asset platform and particular token contract address**.
     * Coin Historical Chart Data by Token Address
     */
    contractAddressMarketChart(requestParameters: ContractAddressMarketChartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoinsMarketChart>;

    /**
     * This endpoint allows you to **get the historical chart data within certain time range in UNIX along with price, market cap and 24hrs volume  based on asset platform and particular token contract address**.
     * @summary Coin Historical Chart Data within Time Range by Token Address
     * @param {string} id asset platform id &lt;br&gt; *refers to [&#x60;/asset_platforms&#x60;](/reference/asset-platforms-list)
     * @param {string} contractAddress the contract address of token
     * @param {string} vsCurrency target currency of market data &lt;br&gt; *refers to [&#x60;/simple/supported_vs_currencies&#x60;](/reference/simple-supported-currencies).
     * @param {number} from starting date in UNIX timestamp
     * @param {number} to ending date in UNIX timestamp
     * @param {'5m' | 'hourly' | 'daily'} [interval] data interval, leave empty for auto granularity
     * @param {'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18'} [precision] decimal place for currency price value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractApiInterface
     */
    contractAddressMarketChartRangeRaw(requestParameters: ContractAddressMarketChartRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoinsMarketChartRange>>;

    /**
     * This endpoint allows you to **get the historical chart data within certain time range in UNIX along with price, market cap and 24hrs volume  based on asset platform and particular token contract address**.
     * Coin Historical Chart Data within Time Range by Token Address
     */
    contractAddressMarketChartRange(requestParameters: ContractAddressMarketChartRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoinsMarketChartRange>;

}

/**
 * 
 */
export class ContractApi extends runtime.BaseAPI implements ContractApiInterface {

    /**
     * This endpoint allows you to **query all the coin data (name, price, market .... including exchange tickers) on CoinGecko coin page based on asset platform and particular token contract address**.
     * Coin Data by Token Address
     */
    async coinsContractAddressRaw(requestParameters: CoinsContractAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoinsContractAddress>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coinsContractAddress().'
            );
        }

        if (requestParameters['contractAddress'] == null) {
            throw new runtime.RequiredError(
                'contractAddress',
                'Required parameter "contractAddress" was null or undefined when calling coinsContractAddress().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_pro_api_key"] = await this.configuration.apiKey("x_cg_pro_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-pro-api-key"] = await this.configuration.apiKey("x-cg-pro-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/coins/{id}/contract/{contract_address}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"contract_address"}}`, encodeURIComponent(String(requestParameters['contractAddress']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoinsContractAddressFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to **query all the coin data (name, price, market .... including exchange tickers) on CoinGecko coin page based on asset platform and particular token contract address**.
     * Coin Data by Token Address
     */
    async coinsContractAddress(requestParameters: CoinsContractAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoinsContractAddress> {
        const response = await this.coinsContractAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to **get the historical chart data including time in UNIX, price, market cap and 24hrs volume based on asset platform and particular token contract address**.
     * Coin Historical Chart Data by Token Address
     */
    async contractAddressMarketChartRaw(requestParameters: ContractAddressMarketChartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoinsMarketChart>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling contractAddressMarketChart().'
            );
        }

        if (requestParameters['contractAddress'] == null) {
            throw new runtime.RequiredError(
                'contractAddress',
                'Required parameter "contractAddress" was null or undefined when calling contractAddressMarketChart().'
            );
        }

        if (requestParameters['vsCurrency'] == null) {
            throw new runtime.RequiredError(
                'vsCurrency',
                'Required parameter "vsCurrency" was null or undefined when calling contractAddressMarketChart().'
            );
        }

        if (requestParameters['days'] == null) {
            throw new runtime.RequiredError(
                'days',
                'Required parameter "days" was null or undefined when calling contractAddressMarketChart().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['vsCurrency'] != null) {
            queryParameters['vs_currency'] = requestParameters['vsCurrency'];
        }

        if (requestParameters['days'] != null) {
            queryParameters['days'] = requestParameters['days'];
        }

        if (requestParameters['interval'] != null) {
            queryParameters['interval'] = requestParameters['interval'];
        }

        if (requestParameters['precision'] != null) {
            queryParameters['precision'] = requestParameters['precision'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_pro_api_key"] = await this.configuration.apiKey("x_cg_pro_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-pro-api-key"] = await this.configuration.apiKey("x-cg-pro-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/coins/{id}/contract/{contract_address}/market_chart`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"contract_address"}}`, encodeURIComponent(String(requestParameters['contractAddress']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoinsMarketChartFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to **get the historical chart data including time in UNIX, price, market cap and 24hrs volume based on asset platform and particular token contract address**.
     * Coin Historical Chart Data by Token Address
     */
    async contractAddressMarketChart(requestParameters: ContractAddressMarketChartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoinsMarketChart> {
        const response = await this.contractAddressMarketChartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to **get the historical chart data within certain time range in UNIX along with price, market cap and 24hrs volume  based on asset platform and particular token contract address**.
     * Coin Historical Chart Data within Time Range by Token Address
     */
    async contractAddressMarketChartRangeRaw(requestParameters: ContractAddressMarketChartRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoinsMarketChartRange>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling contractAddressMarketChartRange().'
            );
        }

        if (requestParameters['contractAddress'] == null) {
            throw new runtime.RequiredError(
                'contractAddress',
                'Required parameter "contractAddress" was null or undefined when calling contractAddressMarketChartRange().'
            );
        }

        if (requestParameters['vsCurrency'] == null) {
            throw new runtime.RequiredError(
                'vsCurrency',
                'Required parameter "vsCurrency" was null or undefined when calling contractAddressMarketChartRange().'
            );
        }

        if (requestParameters['from'] == null) {
            throw new runtime.RequiredError(
                'from',
                'Required parameter "from" was null or undefined when calling contractAddressMarketChartRange().'
            );
        }

        if (requestParameters['to'] == null) {
            throw new runtime.RequiredError(
                'to',
                'Required parameter "to" was null or undefined when calling contractAddressMarketChartRange().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['vsCurrency'] != null) {
            queryParameters['vs_currency'] = requestParameters['vsCurrency'];
        }

        if (requestParameters['from'] != null) {
            queryParameters['from'] = requestParameters['from'];
        }

        if (requestParameters['to'] != null) {
            queryParameters['to'] = requestParameters['to'];
        }

        if (requestParameters['interval'] != null) {
            queryParameters['interval'] = requestParameters['interval'];
        }

        if (requestParameters['precision'] != null) {
            queryParameters['precision'] = requestParameters['precision'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_pro_api_key"] = await this.configuration.apiKey("x_cg_pro_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-pro-api-key"] = await this.configuration.apiKey("x-cg-pro-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/coins/{id}/contract/{contract_address}/market_chart/range`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"contract_address"}}`, encodeURIComponent(String(requestParameters['contractAddress']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoinsMarketChartRangeFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to **get the historical chart data within certain time range in UNIX along with price, market cap and 24hrs volume  based on asset platform and particular token contract address**.
     * Coin Historical Chart Data within Time Range by Token Address
     */
    async contractAddressMarketChartRange(requestParameters: ContractAddressMarketChartRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoinsMarketChartRange> {
        const response = await this.contractAddressMarketChartRangeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ContractAddressMarketChartIntervalEnum = {
    _5m: '5m',
    Hourly: 'hourly',
    Daily: 'daily'
} as const;
export type ContractAddressMarketChartIntervalEnum = typeof ContractAddressMarketChartIntervalEnum[keyof typeof ContractAddressMarketChartIntervalEnum];
/**
 * @export
 */
export const ContractAddressMarketChartPrecisionEnum = {
    Full: 'full',
    _0: '0',
    _1: '1',
    _2: '2',
    _3: '3',
    _4: '4',
    _5: '5',
    _6: '6',
    _7: '7',
    _8: '8',
    _9: '9',
    _10: '10',
    _11: '11',
    _12: '12',
    _13: '13',
    _14: '14',
    _15: '15',
    _16: '16',
    _17: '17',
    _18: '18'
} as const;
export type ContractAddressMarketChartPrecisionEnum = typeof ContractAddressMarketChartPrecisionEnum[keyof typeof ContractAddressMarketChartPrecisionEnum];
/**
 * @export
 */
export const ContractAddressMarketChartRangeIntervalEnum = {
    _5m: '5m',
    Hourly: 'hourly',
    Daily: 'daily'
} as const;
export type ContractAddressMarketChartRangeIntervalEnum = typeof ContractAddressMarketChartRangeIntervalEnum[keyof typeof ContractAddressMarketChartRangeIntervalEnum];
/**
 * @export
 */
export const ContractAddressMarketChartRangePrecisionEnum = {
    Full: 'full',
    _0: '0',
    _1: '1',
    _2: '2',
    _3: '3',
    _4: '4',
    _5: '5',
    _6: '6',
    _7: '7',
    _8: '8',
    _9: '9',
    _10: '10',
    _11: '11',
    _12: '12',
    _13: '13',
    _14: '14',
    _15: '15',
    _16: '16',
    _17: '17',
    _18: '18'
} as const;
export type ContractAddressMarketChartRangePrecisionEnum = typeof ContractAddressMarketChartRangePrecisionEnum[keyof typeof ContractAddressMarketChartRangePrecisionEnum];
