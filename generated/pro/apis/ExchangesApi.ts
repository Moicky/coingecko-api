/* tslint:disable */
/* eslint-disable */
/**
 * CoinGecko Pro API V3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExchangeData,
  ExchangeTickers,
  Exchanges,
  ExchangesList,
} from '../models/index';
import {
    ExchangeDataFromJSON,
    ExchangeDataToJSON,
    ExchangeTickersFromJSON,
    ExchangeTickersToJSON,
    ExchangesFromJSON,
    ExchangesToJSON,
    ExchangesListFromJSON,
    ExchangesListToJSON,
} from '../models/index';

export interface ExchangesRequest {
    perPage?: number;
    page?: number;
}

export interface ExchangesIdRequest {
    id: string;
}

export interface ExchangesIdTickersRequest {
    id: string;
    coinIds?: string;
    includeExchangeLogo?: boolean;
    page?: number;
    depth?: boolean;
    order?: ExchangesIdTickersOrderEnum;
}

export interface ExchangesIdVolumeChartRequest {
    id: string;
    days: ExchangesIdVolumeChartDaysEnum;
}

export interface ExchangesIdVolumeChartRangeRequest {
    id: string;
    from: number;
    to: number;
}

/**
 * ExchangesApi - interface
 * 
 * @export
 * @interface ExchangesApiInterface
 */
export interface ExchangesApiInterface {
    /**
     * This endpoint allows you to **query all the supported exchanges with exchangesâ€™ data (id, name, country, .... etc) that have active trading volumes on CoinGecko**.
     * @summary Exchanges List with data
     * @param {number} [perPage] total results per page, default: 100 &lt;br&gt; Valid values: 1...250
     * @param {number} [page] page through results, default: 1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangesApiInterface
     */
    exchangesRaw(requestParameters: ExchangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Exchanges>>;

    /**
     * This endpoint allows you to **query all the supported exchanges with exchangesâ€™ data (id, name, country, .... etc) that have active trading volumes on CoinGecko**.
     * Exchanges List with data
     */
    exchanges(requestParameters: ExchangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Exchanges>;

    /**
     * This endpoint allows you to **query exchangeâ€™s data (name, year established, country, .... etc), exchange volume in BTC and top 100 tickers based on exchangeâ€™s id**.
     * @summary Exchange Data by ID
     * @param {string} id exchange id &lt;br&gt; *refers to [&#x60;/exchanges/list&#x60;](/reference/exchanges-list).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangesApiInterface
     */
    exchangesIdRaw(requestParameters: ExchangesIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExchangeData>>;

    /**
     * This endpoint allows you to **query exchangeâ€™s data (name, year established, country, .... etc), exchange volume in BTC and top 100 tickers based on exchangeâ€™s id**.
     * Exchange Data by ID
     */
    exchangesId(requestParameters: ExchangesIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExchangeData>;

    /**
     * This endpoint allows you to **query exchange\'s tickers based on exchangeâ€™s id**.
     * @summary Exchange Tickers by ID
     * @param {string} id exchange id &lt;br&gt; *refers to [&#x60;/exchanges/list&#x60;](/reference/exchanges-list).
     * @param {string} [coinIds] filter tickers by coin_ids, comma-separated if querying more than 1 coin &lt;br&gt; *refers to [&#x60;/coins/list&#x60;](/reference/coins-list).
     * @param {boolean} [includeExchangeLogo] include exchange logo, default: false
     * @param {number} [page] page through results
     * @param {boolean} [depth] include 2% orderbook depth (Example: cost_to_move_up_usd &amp; cost_to_move_down_usd),default: false
     * @param {'trust_score_desc' | 'trust_score_asc' | 'volume_desc' | 'volume_asc'} [order] use this to sort the order of responses, default: trust_score_desc
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangesApiInterface
     */
    exchangesIdTickersRaw(requestParameters: ExchangesIdTickersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExchangeTickers>>;

    /**
     * This endpoint allows you to **query exchange\'s tickers based on exchangeâ€™s id**.
     * Exchange Tickers by ID
     */
    exchangesIdTickers(requestParameters: ExchangesIdTickersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExchangeTickers>;

    /**
     * This endpoint allows you to **query the historical volume chart data with time in UNIX and trading volume data in BTC based on exchangeâ€™s id**.
     * @summary Exchange Volume Chart by ID
     * @param {string} id exchange id or derivatives exchange id &lt;br&gt; *refers to [&#x60;/exchanges/list&#x60;](/reference/exchanges-list) or [&#x60;/derivatives/exchanges/list&#x60;](/reference/derivatives-exchanges-list).
     * @param {'1' | '7' | '14' | '30' | '90' | '180' | '365'} days data up to number of days ago
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangesApiInterface
     */
    exchangesIdVolumeChartRaw(requestParameters: ExchangesIdVolumeChartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Array<number>>>>;

    /**
     * This endpoint allows you to **query the historical volume chart data with time in UNIX and trading volume data in BTC based on exchangeâ€™s id**.
     * Exchange Volume Chart by ID
     */
    exchangesIdVolumeChart(requestParameters: ExchangesIdVolumeChartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Array<number>>>;

    /**
     * This endpoint allows you to **query the historical volume chart data in BTC by specifying date range in UNIX based on exchangeâ€™s id**
     * @summary ðŸ’¼ Exchange Volume Chart within Time Range by ID
     * @param {string} id exchange id or derivative exchange id &lt;br&gt; *refers to [&#x60;/exchanges/list&#x60;](/reference/exchanges-list) or [&#x60;/derivatives/exchanges/list&#x60;](/reference/derivatives-exchanges-list).
     * @param {number} from starting date in UNIX timestamp 
     * @param {number} to ending date in UNIX timestamp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangesApiInterface
     */
    exchangesIdVolumeChartRangeRaw(requestParameters: ExchangesIdVolumeChartRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Array<number>>>>;

    /**
     * This endpoint allows you to **query the historical volume chart data in BTC by specifying date range in UNIX based on exchangeâ€™s id**
     * ðŸ’¼ Exchange Volume Chart within Time Range by ID
     */
    exchangesIdVolumeChartRange(requestParameters: ExchangesIdVolumeChartRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Array<number>>>;

    /**
     * This endpoint allows you to **query all the exchanges with id and name**.
     * @summary Exchanges List (ID Map)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangesApiInterface
     */
    exchangesListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExchangesList>>;

    /**
     * This endpoint allows you to **query all the exchanges with id and name**.
     * Exchanges List (ID Map)
     */
    exchangesList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExchangesList>;

}

/**
 * 
 */
export class ExchangesApi extends runtime.BaseAPI implements ExchangesApiInterface {

    /**
     * This endpoint allows you to **query all the supported exchanges with exchangesâ€™ data (id, name, country, .... etc) that have active trading volumes on CoinGecko**.
     * Exchanges List with data
     */
    async exchangesRaw(requestParameters: ExchangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Exchanges>> {
        const queryParameters: any = {};

        if (requestParameters['perPage'] != null) {
            queryParameters['per_page'] = requestParameters['perPage'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_pro_api_key"] = await this.configuration.apiKey("x_cg_pro_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-pro-api-key"] = await this.configuration.apiKey("x-cg-pro-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/exchanges`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExchangesFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to **query all the supported exchanges with exchangesâ€™ data (id, name, country, .... etc) that have active trading volumes on CoinGecko**.
     * Exchanges List with data
     */
    async exchanges(requestParameters: ExchangesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Exchanges> {
        const response = await this.exchangesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to **query exchangeâ€™s data (name, year established, country, .... etc), exchange volume in BTC and top 100 tickers based on exchangeâ€™s id**.
     * Exchange Data by ID
     */
    async exchangesIdRaw(requestParameters: ExchangesIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExchangeData>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling exchangesId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_pro_api_key"] = await this.configuration.apiKey("x_cg_pro_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-pro-api-key"] = await this.configuration.apiKey("x-cg-pro-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/exchanges/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExchangeDataFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to **query exchangeâ€™s data (name, year established, country, .... etc), exchange volume in BTC and top 100 tickers based on exchangeâ€™s id**.
     * Exchange Data by ID
     */
    async exchangesId(requestParameters: ExchangesIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExchangeData> {
        const response = await this.exchangesIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to **query exchange\'s tickers based on exchangeâ€™s id**.
     * Exchange Tickers by ID
     */
    async exchangesIdTickersRaw(requestParameters: ExchangesIdTickersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExchangeTickers>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling exchangesIdTickers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['coinIds'] != null) {
            queryParameters['coin_ids'] = requestParameters['coinIds'];
        }

        if (requestParameters['includeExchangeLogo'] != null) {
            queryParameters['include_exchange_logo'] = requestParameters['includeExchangeLogo'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['depth'] != null) {
            queryParameters['depth'] = requestParameters['depth'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_pro_api_key"] = await this.configuration.apiKey("x_cg_pro_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-pro-api-key"] = await this.configuration.apiKey("x-cg-pro-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/exchanges/{id}/tickers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExchangeTickersFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to **query exchange\'s tickers based on exchangeâ€™s id**.
     * Exchange Tickers by ID
     */
    async exchangesIdTickers(requestParameters: ExchangesIdTickersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExchangeTickers> {
        const response = await this.exchangesIdTickersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to **query the historical volume chart data with time in UNIX and trading volume data in BTC based on exchangeâ€™s id**.
     * Exchange Volume Chart by ID
     */
    async exchangesIdVolumeChartRaw(requestParameters: ExchangesIdVolumeChartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Array<number>>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling exchangesIdVolumeChart().'
            );
        }

        if (requestParameters['days'] == null) {
            throw new runtime.RequiredError(
                'days',
                'Required parameter "days" was null or undefined when calling exchangesIdVolumeChart().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['days'] != null) {
            queryParameters['days'] = requestParameters['days'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_pro_api_key"] = await this.configuration.apiKey("x_cg_pro_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-pro-api-key"] = await this.configuration.apiKey("x-cg-pro-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/exchanges/{id}/volume_chart`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * This endpoint allows you to **query the historical volume chart data with time in UNIX and trading volume data in BTC based on exchangeâ€™s id**.
     * Exchange Volume Chart by ID
     */
    async exchangesIdVolumeChart(requestParameters: ExchangesIdVolumeChartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Array<number>>> {
        const response = await this.exchangesIdVolumeChartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to **query the historical volume chart data in BTC by specifying date range in UNIX based on exchangeâ€™s id**
     * ðŸ’¼ Exchange Volume Chart within Time Range by ID
     */
    async exchangesIdVolumeChartRangeRaw(requestParameters: ExchangesIdVolumeChartRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Array<number>>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling exchangesIdVolumeChartRange().'
            );
        }

        if (requestParameters['from'] == null) {
            throw new runtime.RequiredError(
                'from',
                'Required parameter "from" was null or undefined when calling exchangesIdVolumeChartRange().'
            );
        }

        if (requestParameters['to'] == null) {
            throw new runtime.RequiredError(
                'to',
                'Required parameter "to" was null or undefined when calling exchangesIdVolumeChartRange().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['from'] != null) {
            queryParameters['from'] = requestParameters['from'];
        }

        if (requestParameters['to'] != null) {
            queryParameters['to'] = requestParameters['to'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_pro_api_key"] = await this.configuration.apiKey("x_cg_pro_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-pro-api-key"] = await this.configuration.apiKey("x-cg-pro-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/exchanges/{id}/volume_chart/range`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * This endpoint allows you to **query the historical volume chart data in BTC by specifying date range in UNIX based on exchangeâ€™s id**
     * ðŸ’¼ Exchange Volume Chart within Time Range by ID
     */
    async exchangesIdVolumeChartRange(requestParameters: ExchangesIdVolumeChartRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Array<number>>> {
        const response = await this.exchangesIdVolumeChartRangeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to **query all the exchanges with id and name**.
     * Exchanges List (ID Map)
     */
    async exchangesListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExchangesList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_pro_api_key"] = await this.configuration.apiKey("x_cg_pro_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-pro-api-key"] = await this.configuration.apiKey("x-cg-pro-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/exchanges/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExchangesListFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to **query all the exchanges with id and name**.
     * Exchanges List (ID Map)
     */
    async exchangesList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExchangesList> {
        const response = await this.exchangesListRaw(initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ExchangesIdTickersOrderEnum = {
    TrustScoreDesc: 'trust_score_desc',
    TrustScoreAsc: 'trust_score_asc',
    VolumeDesc: 'volume_desc',
    VolumeAsc: 'volume_asc'
} as const;
export type ExchangesIdTickersOrderEnum = typeof ExchangesIdTickersOrderEnum[keyof typeof ExchangesIdTickersOrderEnum];
/**
 * @export
 */
export const ExchangesIdVolumeChartDaysEnum = {
    _1: '1',
    _7: '7',
    _14: '14',
    _30: '30',
    _90: '90',
    _180: '180',
    _365: '365'
} as const;
export type ExchangesIdVolumeChartDaysEnum = typeof ExchangesIdVolumeChartDaysEnum[keyof typeof ExchangesIdVolumeChartDaysEnum];
