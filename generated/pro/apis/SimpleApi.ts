/* tslint:disable */
/* eslint-disable */
/**
 * CoinGecko Pro API V3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SimplePrice200Response,
  SimpleTokenPrice200Response,
} from '../models/index';
import {
    SimplePrice200ResponseFromJSON,
    SimplePrice200ResponseToJSON,
    SimpleTokenPrice200ResponseFromJSON,
    SimpleTokenPrice200ResponseToJSON,
} from '../models/index';

export interface SimplePriceRequest {
    ids: string;
    vsCurrencies: string;
    includeMarketCap?: boolean;
    include24hrVol?: boolean;
    include24hrChange?: boolean;
    includeLastUpdatedAt?: boolean;
    precision?: SimplePricePrecisionEnum;
}

export interface SimpleTokenPriceRequest {
    id: string;
    contractAddresses: string;
    vsCurrencies: string;
    includeMarketCap?: boolean;
    include24hrVol?: boolean;
    include24hrChange?: boolean;
    includeLastUpdatedAt?: boolean;
    precision?: SimpleTokenPricePrecisionEnum;
}

/**
 * SimpleApi - interface
 * 
 * @export
 * @interface SimpleApiInterface
 */
export interface SimpleApiInterface {
    /**
     * This endpoint allows you to **query the prices of one or more coins by using their unique Coin API IDs**.
     * @summary Coin Price by IDs
     * @param {string} ids coins\&#39; ids, comma-separated if querying more than 1 coin.  &lt;br&gt;*refers to [&#x60;/coins/list&#x60;](/reference/coins-list).
     * @param {string} vsCurrencies target currency of coins, comma-separated if querying more than 1 currency.  &lt;br&gt;*refers to [&#x60;/simple/supported_vs_currencies&#x60;](/reference/simple-supported-currencies).
     * @param {boolean} [includeMarketCap] include market cap, default: false 
     * @param {boolean} [include24hrVol] include 24hr volume, default: false
     * @param {boolean} [include24hrChange] include 24hr change, default: false
     * @param {boolean} [includeLastUpdatedAt] include last updated price time in UNIX, default: false
     * @param {'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18'} [precision] decimal place for currency price value 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleApiInterface
     */
    simplePriceRaw(requestParameters: SimplePriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimplePrice200Response>>;

    /**
     * This endpoint allows you to **query the prices of one or more coins by using their unique Coin API IDs**.
     * Coin Price by IDs
     */
    simplePrice(requestParameters: SimplePriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimplePrice200Response>;

    /**
     * This endpoint allows you to **query all the supported currencies on CoinGecko**.
     * @summary Supported Currencies List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleApiInterface
     */
    simpleSupportedCurrenciesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     * This endpoint allows you to **query all the supported currencies on CoinGecko**.
     * Supported Currencies List
     */
    simpleSupportedCurrencies(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>>;

    /**
     * This endpoint allows you to **query a token price by using token contract address**.
     * @summary Coin Price by Token Addresses
     * @param {string} id asset platform\&#39;s id  &lt;br&gt;*refers to [&#x60;/asset_platforms&#x60;](/reference/asset-platforms-list).
     * @param {string} contractAddresses the contract addresses of tokens, comma-separated if querying more than 1 token\&#39;s contract address
     * @param {string} vsCurrencies target currency of coins, comma-separated if querying more than 1 currency.  &lt;br&gt; *refers to [&#x60;/simple/supported_vs_currencies&#x60;](/reference/simple-supported-currencies).
     * @param {boolean} [includeMarketCap] include market capitalization, default: false
     * @param {boolean} [include24hrVol] include 24hr volume, default: false
     * @param {boolean} [include24hrChange] include 24hr change  default: false
     * @param {boolean} [includeLastUpdatedAt] include last updated price time in UNIX , default: false
     * @param {'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18'} [precision] decimal place for currency price value 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleApiInterface
     */
    simpleTokenPriceRaw(requestParameters: SimpleTokenPriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimpleTokenPrice200Response>>;

    /**
     * This endpoint allows you to **query a token price by using token contract address**.
     * Coin Price by Token Addresses
     */
    simpleTokenPrice(requestParameters: SimpleTokenPriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimpleTokenPrice200Response>;

}

/**
 * 
 */
export class SimpleApi extends runtime.BaseAPI implements SimpleApiInterface {

    /**
     * This endpoint allows you to **query the prices of one or more coins by using their unique Coin API IDs**.
     * Coin Price by IDs
     */
    async simplePriceRaw(requestParameters: SimplePriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimplePrice200Response>> {
        if (requestParameters['ids'] == null) {
            throw new runtime.RequiredError(
                'ids',
                'Required parameter "ids" was null or undefined when calling simplePrice().'
            );
        }

        if (requestParameters['vsCurrencies'] == null) {
            throw new runtime.RequiredError(
                'vsCurrencies',
                'Required parameter "vsCurrencies" was null or undefined when calling simplePrice().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        if (requestParameters['vsCurrencies'] != null) {
            queryParameters['vs_currencies'] = requestParameters['vsCurrencies'];
        }

        if (requestParameters['includeMarketCap'] != null) {
            queryParameters['include_market_cap'] = requestParameters['includeMarketCap'];
        }

        if (requestParameters['include24hrVol'] != null) {
            queryParameters['include_24hr_vol'] = requestParameters['include24hrVol'];
        }

        if (requestParameters['include24hrChange'] != null) {
            queryParameters['include_24hr_change'] = requestParameters['include24hrChange'];
        }

        if (requestParameters['includeLastUpdatedAt'] != null) {
            queryParameters['include_last_updated_at'] = requestParameters['includeLastUpdatedAt'];
        }

        if (requestParameters['precision'] != null) {
            queryParameters['precision'] = requestParameters['precision'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_pro_api_key"] = await this.configuration.apiKey("x_cg_pro_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-pro-api-key"] = await this.configuration.apiKey("x-cg-pro-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/simple/price`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SimplePrice200ResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to **query the prices of one or more coins by using their unique Coin API IDs**.
     * Coin Price by IDs
     */
    async simplePrice(requestParameters: SimplePriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimplePrice200Response> {
        const response = await this.simplePriceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to **query all the supported currencies on CoinGecko**.
     * Supported Currencies List
     */
    async simpleSupportedCurrenciesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_pro_api_key"] = await this.configuration.apiKey("x_cg_pro_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-pro-api-key"] = await this.configuration.apiKey("x-cg-pro-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/simple/supported_vs_currencies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * This endpoint allows you to **query all the supported currencies on CoinGecko**.
     * Supported Currencies List
     */
    async simpleSupportedCurrencies(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.simpleSupportedCurrenciesRaw(initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to **query a token price by using token contract address**.
     * Coin Price by Token Addresses
     */
    async simpleTokenPriceRaw(requestParameters: SimpleTokenPriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimpleTokenPrice200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling simpleTokenPrice().'
            );
        }

        if (requestParameters['contractAddresses'] == null) {
            throw new runtime.RequiredError(
                'contractAddresses',
                'Required parameter "contractAddresses" was null or undefined when calling simpleTokenPrice().'
            );
        }

        if (requestParameters['vsCurrencies'] == null) {
            throw new runtime.RequiredError(
                'vsCurrencies',
                'Required parameter "vsCurrencies" was null or undefined when calling simpleTokenPrice().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['contractAddresses'] != null) {
            queryParameters['contract_addresses'] = requestParameters['contractAddresses'];
        }

        if (requestParameters['vsCurrencies'] != null) {
            queryParameters['vs_currencies'] = requestParameters['vsCurrencies'];
        }

        if (requestParameters['includeMarketCap'] != null) {
            queryParameters['include_market_cap'] = requestParameters['includeMarketCap'];
        }

        if (requestParameters['include24hrVol'] != null) {
            queryParameters['include_24hr_vol'] = requestParameters['include24hrVol'];
        }

        if (requestParameters['include24hrChange'] != null) {
            queryParameters['include_24hr_change'] = requestParameters['include24hrChange'];
        }

        if (requestParameters['includeLastUpdatedAt'] != null) {
            queryParameters['include_last_updated_at'] = requestParameters['includeLastUpdatedAt'];
        }

        if (requestParameters['precision'] != null) {
            queryParameters['precision'] = requestParameters['precision'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_pro_api_key"] = await this.configuration.apiKey("x_cg_pro_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-pro-api-key"] = await this.configuration.apiKey("x-cg-pro-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/simple/token_price/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SimpleTokenPrice200ResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to **query a token price by using token contract address**.
     * Coin Price by Token Addresses
     */
    async simpleTokenPrice(requestParameters: SimpleTokenPriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimpleTokenPrice200Response> {
        const response = await this.simpleTokenPriceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const SimplePricePrecisionEnum = {
    Full: 'full',
    _0: '0',
    _1: '1',
    _2: '2',
    _3: '3',
    _4: '4',
    _5: '5',
    _6: '6',
    _7: '7',
    _8: '8',
    _9: '9',
    _10: '10',
    _11: '11',
    _12: '12',
    _13: '13',
    _14: '14',
    _15: '15',
    _16: '16',
    _17: '17',
    _18: '18'
} as const;
export type SimplePricePrecisionEnum = typeof SimplePricePrecisionEnum[keyof typeof SimplePricePrecisionEnum];
/**
 * @export
 */
export const SimpleTokenPricePrecisionEnum = {
    Full: 'full',
    _0: '0',
    _1: '1',
    _2: '2',
    _3: '3',
    _4: '4',
    _5: '5',
    _6: '6',
    _7: '7',
    _8: '8',
    _9: '9',
    _10: '10',
    _11: '11',
    _12: '12',
    _13: '13',
    _14: '14',
    _15: '15',
    _16: '16',
    _17: '17',
    _18: '18'
} as const;
export type SimpleTokenPricePrecisionEnum = typeof SimpleTokenPricePrecisionEnum[keyof typeof SimpleTokenPricePrecisionEnum];
