/* tslint:disable */
/* eslint-disable */
/**
 * CoinGecko Pro API V3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoinsHistoricalData,
  CoinsID,
  CoinsListInner,
  CoinsListNewInner,
  CoinsMarketChart,
  CoinsMarketChartRange,
  CoinsMarkets,
  CoinsTickers,
  TopGainersLosersInner,
} from '../models/index';
import {
    CoinsHistoricalDataFromJSON,
    CoinsHistoricalDataToJSON,
    CoinsIDFromJSON,
    CoinsIDToJSON,
    CoinsListInnerFromJSON,
    CoinsListInnerToJSON,
    CoinsListNewInnerFromJSON,
    CoinsListNewInnerToJSON,
    CoinsMarketChartFromJSON,
    CoinsMarketChartToJSON,
    CoinsMarketChartRangeFromJSON,
    CoinsMarketChartRangeToJSON,
    CoinsMarketsFromJSON,
    CoinsMarketsToJSON,
    CoinsTickersFromJSON,
    CoinsTickersToJSON,
    TopGainersLosersInnerFromJSON,
    TopGainersLosersInnerToJSON,
} from '../models/index';

export interface CoinsIdRequest {
    id: string;
    localization?: boolean;
    tickers?: boolean;
    marketData?: boolean;
    communityData?: boolean;
    developerData?: boolean;
    sparkline?: boolean;
}

export interface CoinsIdCirculatingSupplyChartRequest {
    id: string;
    days: string;
    interval?: CoinsIdCirculatingSupplyChartIntervalEnum;
}

export interface CoinsIdCirculatingSupplyChartRangeRequest {
    id: string;
    from: number;
    to: number;
}

export interface CoinsIdHistoryRequest {
    id: string;
    date: string;
    localization?: boolean;
}

export interface CoinsIdMarketChartRequest {
    id: string;
    vsCurrency: string;
    days: string;
    interval?: CoinsIdMarketChartIntervalEnum;
    precision?: CoinsIdMarketChartPrecisionEnum;
}

export interface CoinsIdMarketChartRangeRequest {
    id: string;
    vsCurrency: string;
    from: number;
    to: number;
    interval?: CoinsIdMarketChartRangeIntervalEnum;
    precision?: CoinsIdMarketChartRangePrecisionEnum;
}

export interface CoinsIdOhlcRequest {
    id: string;
    vsCurrency: string;
    days: CoinsIdOhlcDaysEnum;
    interval?: CoinsIdOhlcIntervalEnum;
    precision?: CoinsIdOhlcPrecisionEnum;
}

export interface CoinsIdOhlcRangeRequest {
    id: string;
    vsCurrency: string;
    from: number;
    to: number;
    interval: CoinsIdOhlcRangeIntervalEnum;
}

export interface CoinsIdTickersRequest {
    id: string;
    exchangeIds?: string;
    includeExchangeLogo?: boolean;
    page?: number;
    order?: CoinsIdTickersOrderEnum;
    depth?: boolean;
}

export interface CoinsIdTotalSupplyChartRequest {
    id: string;
    days: string;
    interval?: CoinsIdTotalSupplyChartIntervalEnum;
}

export interface CoinsIdTotalSupplyChartRangeRequest {
    id: string;
    from: number;
    to: number;
}

export interface CoinsListRequest {
    includePlatform?: boolean;
    status?: CoinsListStatusEnum;
}

export interface CoinsMarketsRequest {
    vsCurrency: string;
    ids?: string;
    category?: string;
    order?: CoinsMarketsOrderEnum;
    perPage?: number;
    page?: number;
    sparkline?: boolean;
    priceChangePercentage?: string;
    locale?: CoinsMarketsLocaleEnum;
    precision?: CoinsMarketsPrecisionEnum;
}

export interface CoinsTopGainersLosersRequest {
    vsCurrency: string;
    duration?: CoinsTopGainersLosersDurationEnum;
    topCoins?: CoinsTopGainersLosersTopCoinsEnum;
}

/**
 * CoinsApi - interface
 * 
 * @export
 * @interface CoinsApiInterface
 */
export interface CoinsApiInterface {
    /**
     * This endpoint allows you to **query all the coin data of a coin (name, price, market .... including exchange tickers) on CoinGecko coin page based on a particular coin id**.
     * @summary Coin Data by ID
     * @param {string} id coin id &lt;br&gt; *refers to [&#x60;/coins/list&#x60;](/reference/coins-list).
     * @param {boolean} [localization] include all the localized languages in the response, default: true
     * @param {boolean} [tickers] include tickers data, default: true
     * @param {boolean} [marketData] include market data, default: true
     * @param {boolean} [communityData] include community data, default: true
     * @param {boolean} [developerData] include developer data, default: true
     * @param {boolean} [sparkline] include sparkline 7 days data, default: false
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoinsApiInterface
     */
    coinsIdRaw(requestParameters: CoinsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoinsID>>;

    /**
     * This endpoint allows you to **query all the coin data of a coin (name, price, market .... including exchange tickers) on CoinGecko coin page based on a particular coin id**.
     * Coin Data by ID
     */
    coinsId(requestParameters: CoinsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoinsID>;

    /**
     * This endpoint allows you to **query historical circulating supply of a coin by number of days away from now based on provided coin id**
     * @summary ðŸ‘‘ Circulating Supply Chart by ID
     * @param {string} id coin id &lt;br&gt; *refers to [&#x60;/coins/list&#x60;](/reference/coins-list).
     * @param {string} days data up to number of days ago  &lt;br&gt; Valid values: any integer or &#x60;max&#x60;
     * @param {'daily'} [interval] data interval
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoinsApiInterface
     */
    coinsIdCirculatingSupplyChartRaw(requestParameters: CoinsIdCirculatingSupplyChartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Array<number>>>>;

    /**
     * This endpoint allows you to **query historical circulating supply of a coin by number of days away from now based on provided coin id**
     * ðŸ‘‘ Circulating Supply Chart by ID
     */
    coinsIdCirculatingSupplyChart(requestParameters: CoinsIdCirculatingSupplyChartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Array<number>>>;

    /**
     * This endpoint allows you to **query historical circulating supply of a coin, within a range of timestamp based on the provided coin id**
     * @summary ðŸ‘‘ Circulating Supply chart within Time Range by ID
     * @param {string} id coin id &lt;br&gt; *refers to [&#x60;/coins/list&#x60;](/reference/coins-list).
     * @param {number} from starting date in UNIX timestamp 
     * @param {number} to ending date in UNIX timestamp 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoinsApiInterface
     */
    coinsIdCirculatingSupplyChartRangeRaw(requestParameters: CoinsIdCirculatingSupplyChartRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Array<number>>>>;

    /**
     * This endpoint allows you to **query historical circulating supply of a coin, within a range of timestamp based on the provided coin id**
     * ðŸ‘‘ Circulating Supply chart within Time Range by ID
     */
    coinsIdCirculatingSupplyChartRange(requestParameters: CoinsIdCirculatingSupplyChartRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Array<number>>>;

    /**
     * This endpoint allows you to **query the historical data (price, market cap, 24hrs volume, etc) at a given date for a coin based on a particular coin id**.
     * @summary Coin Historical Data by ID
     * @param {string} id coin id &lt;br&gt; *refers to [&#x60;/coins/list&#x60;](/reference/coins-list).
     * @param {string} date the date of data snapshot &lt;br&gt; Format: &#x60;dd-mm-yyyy&#x60;
     * @param {boolean} [localization] include all the localized languages in response, default: true
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoinsApiInterface
     */
    coinsIdHistoryRaw(requestParameters: CoinsIdHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoinsHistoricalData>>;

    /**
     * This endpoint allows you to **query the historical data (price, market cap, 24hrs volume, etc) at a given date for a coin based on a particular coin id**.
     * Coin Historical Data by ID
     */
    coinsIdHistory(requestParameters: CoinsIdHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoinsHistoricalData>;

    /**
     * This endpoint allows you to **get the historical chart data of a coin including time in UNIX, price, market cap and 24hrs volume based on particular coin id**.
     * @summary Coin Historical Chart Data by ID
     * @param {string} id coin id &lt;br&gt; *refers to [&#x60;/coins/list&#x60;](/reference/coins-list).
     * @param {string} vsCurrency target currency of market data &lt;br&gt; *refers to [&#x60;/simple/supported_vs_currencies&#x60;](/reference/simple-supported-currencies).
     * @param {string} days data up to number of days ago &lt;br&gt; you may use any integer or &#x60;max&#x60; for number of days
     * @param {'5m' | 'hourly' | 'daily'} [interval] data interval, leave empty for auto granularity
     * @param {'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18'} [precision] decimal place for currency price value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoinsApiInterface
     */
    coinsIdMarketChartRaw(requestParameters: CoinsIdMarketChartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoinsMarketChart>>;

    /**
     * This endpoint allows you to **get the historical chart data of a coin including time in UNIX, price, market cap and 24hrs volume based on particular coin id**.
     * Coin Historical Chart Data by ID
     */
    coinsIdMarketChart(requestParameters: CoinsIdMarketChartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoinsMarketChart>;

    /**
     * This endpoint allows you to **get the historical chart data of a coin within certain time range in UNIX along with price, market cap and 24hrs volume based on particular coin id**.
     * @summary Coin Historical Chart Data within Time Range by ID
     * @param {string} id coin id &lt;br&gt; *refers to [&#x60;/coins/list&#x60;](/reference/coins-list).
     * @param {string} vsCurrency target currency of market data &lt;br&gt; *refers to [&#x60;/simple/supported_vs_currencies&#x60;](/reference/simple-supported-currencies).
     * @param {number} from starting date in UNIX timestamp 
     * @param {number} to ending date in UNIX timestamp
     * @param {'5m' | 'hourly' | 'daily'} [interval] data interval, leave empty for auto granularity 
     * @param {'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18'} [precision] decimal place for currency price value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoinsApiInterface
     */
    coinsIdMarketChartRangeRaw(requestParameters: CoinsIdMarketChartRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoinsMarketChartRange>>;

    /**
     * This endpoint allows you to **get the historical chart data of a coin within certain time range in UNIX along with price, market cap and 24hrs volume based on particular coin id**.
     * Coin Historical Chart Data within Time Range by ID
     */
    coinsIdMarketChartRange(requestParameters: CoinsIdMarketChartRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoinsMarketChartRange>;

    /**
     * This endpoint allows you to **get the OHLC chart (Open, High, Low, Close) of a coin based on particular coin id**.
     * @summary Coin OHLC Chart by ID
     * @param {string} id coin id &lt;br&gt; *refers to [&#x60;/coins/list&#x60;](/reference/coins-list).
     * @param {string} vsCurrency target currency of price data &lt;br&gt; *refers to [&#x60;/simple/supported_vs_currencies&#x60;](/reference/simple-supported-currencies).
     * @param {'1' | '7' | '14' | '30' | '90' | '180' | '365' | 'max'} days data up to number of days ago 
     * @param {'daily' | 'hourly'} [interval] data interval, leave empty for auto granularity
     * @param {'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18'} [precision] decimal place for currency price value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoinsApiInterface
     */
    coinsIdOhlcRaw(requestParameters: CoinsIdOhlcRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Array<number>>>>;

    /**
     * This endpoint allows you to **get the OHLC chart (Open, High, Low, Close) of a coin based on particular coin id**.
     * Coin OHLC Chart by ID
     */
    coinsIdOhlc(requestParameters: CoinsIdOhlcRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Array<number>>>;

    /**
     * This endpoint allows you to **get the OHLC chart (Open, High, Low, Close) of a coin within a range of timestamp based on particular coin id**.
     * @summary ðŸ’¼ Coin OHLC Chart within Time Range by ID
     * @param {string} id coin id &lt;br&gt; *refers to [&#x60;/coins/list&#x60;](/reference/coins-list).
     * @param {string} vsCurrency target currency of price data &lt;br&gt; *refers to [&#x60;/simple/supported_vs_currencies&#x60;](/reference/simple-supported-currencies).
     * @param {number} from starting date in UNIX timestamp
     * @param {number} to ending date in UNIX timestamp
     * @param {'daily' | 'hourly'} interval data interval
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoinsApiInterface
     */
    coinsIdOhlcRangeRaw(requestParameters: CoinsIdOhlcRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Array<number>>>>;

    /**
     * This endpoint allows you to **get the OHLC chart (Open, High, Low, Close) of a coin within a range of timestamp based on particular coin id**.
     * ðŸ’¼ Coin OHLC Chart within Time Range by ID
     */
    coinsIdOhlcRange(requestParameters: CoinsIdOhlcRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Array<number>>>;

    /**
     * This endpoint allows you to **query the coin tickers on both centralized exchange (cex) and decentralized exchange (dex) based on a particular coin id**.
     * @summary Coin Tickers by ID
     * @param {string} id coin id &lt;br&gt; *refers to [&#x60;/coins/list&#x60;](/reference/coins-list).
     * @param {string} [exchangeIds] exchange id &lt;br&gt; *refers to [&#x60;/exchanges/list&#x60;](/reference/exchanges-list).
     * @param {boolean} [includeExchangeLogo] include exchange logo, default: false
     * @param {number} [page] page through results
     * @param {'trust_score_desc' | 'trust_score_asc' | 'volume_desc' | 'volume_asc'} [order] use this to sort the order of responses, default: trust_score_desc
     * @param {boolean} [depth] include 2% orderbook depth, ie. &#x60;cost_to_move_up_usd&#x60; and &#x60;cost_to_move_down_usd&#x60; &lt;br&gt; default: false
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoinsApiInterface
     */
    coinsIdTickersRaw(requestParameters: CoinsIdTickersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoinsTickers>>;

    /**
     * This endpoint allows you to **query the coin tickers on both centralized exchange (cex) and decentralized exchange (dex) based on a particular coin id**.
     * Coin Tickers by ID
     */
    coinsIdTickers(requestParameters: CoinsIdTickersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoinsTickers>;

    /**
     * This endpoint allows you to **query historical total supply of a coin by number of days away from now based on provided coin id**
     * @summary ðŸ‘‘ Total Supply Chart by ID
     * @param {string} id coin id  &lt;br&gt; *refers to [&#x60;/coins/list&#x60;](/reference/coins-list).
     * @param {string} days data up to number of days ago  &lt;br&gt; Valid values: any integer or &#x60;max&#x60;
     * @param {'daily'} [interval] data interval
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoinsApiInterface
     */
    coinsIdTotalSupplyChartRaw(requestParameters: CoinsIdTotalSupplyChartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Array<number>>>>;

    /**
     * This endpoint allows you to **query historical total supply of a coin by number of days away from now based on provided coin id**
     * ðŸ‘‘ Total Supply Chart by ID
     */
    coinsIdTotalSupplyChart(requestParameters: CoinsIdTotalSupplyChartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Array<number>>>;

    /**
     * This endpoint allows you to **query historical total supply of a coin, within a range of timestamp based on the provided coin id**
     * @summary ðŸ‘‘ Total Supply chart within time range by ID
     * @param {string} id coin id  &lt;br&gt; *refers to [&#x60;/coins/list&#x60;](/reference/coins-list).
     * @param {number} from starting date in UNIX timestamp 
     * @param {number} to ending date in UNIX timestamp 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoinsApiInterface
     */
    coinsIdTotalSupplyChartRangeRaw(requestParameters: CoinsIdTotalSupplyChartRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Array<number>>>>;

    /**
     * This endpoint allows you to **query historical total supply of a coin, within a range of timestamp based on the provided coin id**
     * ðŸ‘‘ Total Supply chart within time range by ID
     */
    coinsIdTotalSupplyChartRange(requestParameters: CoinsIdTotalSupplyChartRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Array<number>>>;

    /**
     * This endpoint allows you to **query all the supported coins on CoinGecko with coins id, name and symbol**.
     * @summary Coins List (ID Map)
     * @param {boolean} [includePlatform] include platform and token\&#39;s contract addresses, default: false
     * @param {'active' | 'inactive'} [status] filter by status of coins, default: active
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoinsApiInterface
     */
    coinsListRaw(requestParameters: CoinsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CoinsListInner>>>;

    /**
     * This endpoint allows you to **query all the supported coins on CoinGecko with coins id, name and symbol**.
     * Coins List (ID Map)
     */
    coinsList(requestParameters: CoinsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CoinsListInner>>;

    /**
     * This endpoint allows you to **query the latest 200 coins that recently listed on CoinGecko**
     * @summary ðŸ’¼ Recently Added Coins
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoinsApiInterface
     */
    coinsListNewRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CoinsListNewInner>>>;

    /**
     * This endpoint allows you to **query the latest 200 coins that recently listed on CoinGecko**
     * ðŸ’¼ Recently Added Coins
     */
    coinsListNew(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CoinsListNewInner>>;

    /**
     * This endpoint allows you to **query all the supported coins with price, market cap, volume and market related data**.
     * @summary Coins List with Market Data
     * @param {string} vsCurrency target currency of coins and market data &lt;br&gt; *refers to [&#x60;/simple/supported_vs_currencies&#x60;](/reference/simple-supported-currencies).
     * @param {string} [ids] coins\&#39; ids, comma-separated if querying more than 1 coin.  &lt;br&gt; *refers to [&#x60;/coins/list&#x60;](/reference/coins-list).
     * @param {string} [category] filter based on coins\&#39; category &lt;br&gt; *refers to [&#x60;/coins/categories/list&#x60;](/reference/coins-categories-list).
     * @param {'market_cap_asc' | 'market_cap_desc' | 'volume_asc' | 'volume_desc' | 'id_asc' | 'id_desc'} [order] sort result by field, default: market_cap_desc
     * @param {number} [perPage] total results per page, default: 100 &lt;br&gt; Valid values: 1...250
     * @param {number} [page] page through results, default: 1
     * @param {boolean} [sparkline] include sparkline 7 days data, default: false
     * @param {string} [priceChangePercentage] include price change percentage timeframe, comma-separated if query more than 1 price change percentage timeframe &lt;br&gt; Valid values: 1h, 24h, 7d, 14d, 30d, 200d, 1y
     * @param {'ar' | 'bg' | 'cs' | 'da' | 'de' | 'el' | 'en' | 'es' | 'fi' | 'fr' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'ko' | 'lt' | 'nl' | 'no' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'sv' | 'th' | 'tr' | 'uk' | 'vi' | 'zh' | 'zh-tw'} [locale] language background, default: en
     * @param {'full' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18'} [precision] decimal place for currency price value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoinsApiInterface
     */
    coinsMarketsRaw(requestParameters: CoinsMarketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoinsMarkets>>;

    /**
     * This endpoint allows you to **query all the supported coins with price, market cap, volume and market related data**.
     * Coins List with Market Data
     */
    coinsMarkets(requestParameters: CoinsMarketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoinsMarkets>;

    /**
     * This endpoint allows you to **query the top 30 coins with largest price gain and loss by a specific time duration**
     * @summary ðŸ’¼ Top Gainers & Losers
     * @param {string} vsCurrency target currency of coins  &lt;br&gt; *refers to [&#x60;/simple/supported_vs_currencies&#x60;](/reference/simple-supported-currencies).
     * @param {'1h' | '24h' | '7d' | '14d' | '30d' | '60d' | '1y'} [duration] filter result by time range &lt;br&gt; Default value: &#x60;24h&#x60;
     * @param {'300' | '500' | '1000' | 'all'} [topCoins] filter result by market cap ranking (top 300 to 1000) or all coins (including coins that do not have market cap)  &lt;br&gt; Default value: &#x60;1000&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoinsApiInterface
     */
    coinsTopGainersLosersRaw(requestParameters: CoinsTopGainersLosersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TopGainersLosersInner>>>;

    /**
     * This endpoint allows you to **query the top 30 coins with largest price gain and loss by a specific time duration**
     * ðŸ’¼ Top Gainers & Losers
     */
    coinsTopGainersLosers(requestParameters: CoinsTopGainersLosersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TopGainersLosersInner>>;

}

/**
 * 
 */
export class CoinsApi extends runtime.BaseAPI implements CoinsApiInterface {

    /**
     * This endpoint allows you to **query all the coin data of a coin (name, price, market .... including exchange tickers) on CoinGecko coin page based on a particular coin id**.
     * Coin Data by ID
     */
    async coinsIdRaw(requestParameters: CoinsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoinsID>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coinsId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['localization'] != null) {
            queryParameters['localization'] = requestParameters['localization'];
        }

        if (requestParameters['tickers'] != null) {
            queryParameters['tickers'] = requestParameters['tickers'];
        }

        if (requestParameters['marketData'] != null) {
            queryParameters['market_data'] = requestParameters['marketData'];
        }

        if (requestParameters['communityData'] != null) {
            queryParameters['community_data'] = requestParameters['communityData'];
        }

        if (requestParameters['developerData'] != null) {
            queryParameters['developer_data'] = requestParameters['developerData'];
        }

        if (requestParameters['sparkline'] != null) {
            queryParameters['sparkline'] = requestParameters['sparkline'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_pro_api_key"] = await this.configuration.apiKey("x_cg_pro_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-pro-api-key"] = await this.configuration.apiKey("x-cg-pro-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/coins/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoinsIDFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to **query all the coin data of a coin (name, price, market .... including exchange tickers) on CoinGecko coin page based on a particular coin id**.
     * Coin Data by ID
     */
    async coinsId(requestParameters: CoinsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoinsID> {
        const response = await this.coinsIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to **query historical circulating supply of a coin by number of days away from now based on provided coin id**
     * ðŸ‘‘ Circulating Supply Chart by ID
     */
    async coinsIdCirculatingSupplyChartRaw(requestParameters: CoinsIdCirculatingSupplyChartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Array<number>>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coinsIdCirculatingSupplyChart().'
            );
        }

        if (requestParameters['days'] == null) {
            throw new runtime.RequiredError(
                'days',
                'Required parameter "days" was null or undefined when calling coinsIdCirculatingSupplyChart().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['days'] != null) {
            queryParameters['days'] = requestParameters['days'];
        }

        if (requestParameters['interval'] != null) {
            queryParameters['interval'] = requestParameters['interval'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_pro_api_key"] = await this.configuration.apiKey("x_cg_pro_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-pro-api-key"] = await this.configuration.apiKey("x-cg-pro-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/coins/{id}/circulating_supply_chart`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * This endpoint allows you to **query historical circulating supply of a coin by number of days away from now based on provided coin id**
     * ðŸ‘‘ Circulating Supply Chart by ID
     */
    async coinsIdCirculatingSupplyChart(requestParameters: CoinsIdCirculatingSupplyChartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Array<number>>> {
        const response = await this.coinsIdCirculatingSupplyChartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to **query historical circulating supply of a coin, within a range of timestamp based on the provided coin id**
     * ðŸ‘‘ Circulating Supply chart within Time Range by ID
     */
    async coinsIdCirculatingSupplyChartRangeRaw(requestParameters: CoinsIdCirculatingSupplyChartRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Array<number>>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coinsIdCirculatingSupplyChartRange().'
            );
        }

        if (requestParameters['from'] == null) {
            throw new runtime.RequiredError(
                'from',
                'Required parameter "from" was null or undefined when calling coinsIdCirculatingSupplyChartRange().'
            );
        }

        if (requestParameters['to'] == null) {
            throw new runtime.RequiredError(
                'to',
                'Required parameter "to" was null or undefined when calling coinsIdCirculatingSupplyChartRange().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['from'] != null) {
            queryParameters['from'] = requestParameters['from'];
        }

        if (requestParameters['to'] != null) {
            queryParameters['to'] = requestParameters['to'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_pro_api_key"] = await this.configuration.apiKey("x_cg_pro_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-pro-api-key"] = await this.configuration.apiKey("x-cg-pro-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/coins/{id}/circulating_supply_chart/range`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * This endpoint allows you to **query historical circulating supply of a coin, within a range of timestamp based on the provided coin id**
     * ðŸ‘‘ Circulating Supply chart within Time Range by ID
     */
    async coinsIdCirculatingSupplyChartRange(requestParameters: CoinsIdCirculatingSupplyChartRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Array<number>>> {
        const response = await this.coinsIdCirculatingSupplyChartRangeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to **query the historical data (price, market cap, 24hrs volume, etc) at a given date for a coin based on a particular coin id**.
     * Coin Historical Data by ID
     */
    async coinsIdHistoryRaw(requestParameters: CoinsIdHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoinsHistoricalData>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coinsIdHistory().'
            );
        }

        if (requestParameters['date'] == null) {
            throw new runtime.RequiredError(
                'date',
                'Required parameter "date" was null or undefined when calling coinsIdHistory().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['date'] != null) {
            queryParameters['date'] = requestParameters['date'];
        }

        if (requestParameters['localization'] != null) {
            queryParameters['localization'] = requestParameters['localization'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_pro_api_key"] = await this.configuration.apiKey("x_cg_pro_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-pro-api-key"] = await this.configuration.apiKey("x-cg-pro-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/coins/{id}/history`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoinsHistoricalDataFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to **query the historical data (price, market cap, 24hrs volume, etc) at a given date for a coin based on a particular coin id**.
     * Coin Historical Data by ID
     */
    async coinsIdHistory(requestParameters: CoinsIdHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoinsHistoricalData> {
        const response = await this.coinsIdHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to **get the historical chart data of a coin including time in UNIX, price, market cap and 24hrs volume based on particular coin id**.
     * Coin Historical Chart Data by ID
     */
    async coinsIdMarketChartRaw(requestParameters: CoinsIdMarketChartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoinsMarketChart>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coinsIdMarketChart().'
            );
        }

        if (requestParameters['vsCurrency'] == null) {
            throw new runtime.RequiredError(
                'vsCurrency',
                'Required parameter "vsCurrency" was null or undefined when calling coinsIdMarketChart().'
            );
        }

        if (requestParameters['days'] == null) {
            throw new runtime.RequiredError(
                'days',
                'Required parameter "days" was null or undefined when calling coinsIdMarketChart().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['vsCurrency'] != null) {
            queryParameters['vs_currency'] = requestParameters['vsCurrency'];
        }

        if (requestParameters['days'] != null) {
            queryParameters['days'] = requestParameters['days'];
        }

        if (requestParameters['interval'] != null) {
            queryParameters['interval'] = requestParameters['interval'];
        }

        if (requestParameters['precision'] != null) {
            queryParameters['precision'] = requestParameters['precision'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_pro_api_key"] = await this.configuration.apiKey("x_cg_pro_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-pro-api-key"] = await this.configuration.apiKey("x-cg-pro-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/coins/{id}/market_chart`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoinsMarketChartFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to **get the historical chart data of a coin including time in UNIX, price, market cap and 24hrs volume based on particular coin id**.
     * Coin Historical Chart Data by ID
     */
    async coinsIdMarketChart(requestParameters: CoinsIdMarketChartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoinsMarketChart> {
        const response = await this.coinsIdMarketChartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to **get the historical chart data of a coin within certain time range in UNIX along with price, market cap and 24hrs volume based on particular coin id**.
     * Coin Historical Chart Data within Time Range by ID
     */
    async coinsIdMarketChartRangeRaw(requestParameters: CoinsIdMarketChartRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoinsMarketChartRange>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coinsIdMarketChartRange().'
            );
        }

        if (requestParameters['vsCurrency'] == null) {
            throw new runtime.RequiredError(
                'vsCurrency',
                'Required parameter "vsCurrency" was null or undefined when calling coinsIdMarketChartRange().'
            );
        }

        if (requestParameters['from'] == null) {
            throw new runtime.RequiredError(
                'from',
                'Required parameter "from" was null or undefined when calling coinsIdMarketChartRange().'
            );
        }

        if (requestParameters['to'] == null) {
            throw new runtime.RequiredError(
                'to',
                'Required parameter "to" was null or undefined when calling coinsIdMarketChartRange().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['vsCurrency'] != null) {
            queryParameters['vs_currency'] = requestParameters['vsCurrency'];
        }

        if (requestParameters['from'] != null) {
            queryParameters['from'] = requestParameters['from'];
        }

        if (requestParameters['to'] != null) {
            queryParameters['to'] = requestParameters['to'];
        }

        if (requestParameters['interval'] != null) {
            queryParameters['interval'] = requestParameters['interval'];
        }

        if (requestParameters['precision'] != null) {
            queryParameters['precision'] = requestParameters['precision'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_pro_api_key"] = await this.configuration.apiKey("x_cg_pro_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-pro-api-key"] = await this.configuration.apiKey("x-cg-pro-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/coins/{id}/market_chart/range`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoinsMarketChartRangeFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to **get the historical chart data of a coin within certain time range in UNIX along with price, market cap and 24hrs volume based on particular coin id**.
     * Coin Historical Chart Data within Time Range by ID
     */
    async coinsIdMarketChartRange(requestParameters: CoinsIdMarketChartRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoinsMarketChartRange> {
        const response = await this.coinsIdMarketChartRangeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to **get the OHLC chart (Open, High, Low, Close) of a coin based on particular coin id**.
     * Coin OHLC Chart by ID
     */
    async coinsIdOhlcRaw(requestParameters: CoinsIdOhlcRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Array<number>>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coinsIdOhlc().'
            );
        }

        if (requestParameters['vsCurrency'] == null) {
            throw new runtime.RequiredError(
                'vsCurrency',
                'Required parameter "vsCurrency" was null or undefined when calling coinsIdOhlc().'
            );
        }

        if (requestParameters['days'] == null) {
            throw new runtime.RequiredError(
                'days',
                'Required parameter "days" was null or undefined when calling coinsIdOhlc().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['vsCurrency'] != null) {
            queryParameters['vs_currency'] = requestParameters['vsCurrency'];
        }

        if (requestParameters['days'] != null) {
            queryParameters['days'] = requestParameters['days'];
        }

        if (requestParameters['interval'] != null) {
            queryParameters['interval'] = requestParameters['interval'];
        }

        if (requestParameters['precision'] != null) {
            queryParameters['precision'] = requestParameters['precision'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_pro_api_key"] = await this.configuration.apiKey("x_cg_pro_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-pro-api-key"] = await this.configuration.apiKey("x-cg-pro-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/coins/{id}/ohlc`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * This endpoint allows you to **get the OHLC chart (Open, High, Low, Close) of a coin based on particular coin id**.
     * Coin OHLC Chart by ID
     */
    async coinsIdOhlc(requestParameters: CoinsIdOhlcRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Array<number>>> {
        const response = await this.coinsIdOhlcRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to **get the OHLC chart (Open, High, Low, Close) of a coin within a range of timestamp based on particular coin id**.
     * ðŸ’¼ Coin OHLC Chart within Time Range by ID
     */
    async coinsIdOhlcRangeRaw(requestParameters: CoinsIdOhlcRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Array<number>>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coinsIdOhlcRange().'
            );
        }

        if (requestParameters['vsCurrency'] == null) {
            throw new runtime.RequiredError(
                'vsCurrency',
                'Required parameter "vsCurrency" was null or undefined when calling coinsIdOhlcRange().'
            );
        }

        if (requestParameters['from'] == null) {
            throw new runtime.RequiredError(
                'from',
                'Required parameter "from" was null or undefined when calling coinsIdOhlcRange().'
            );
        }

        if (requestParameters['to'] == null) {
            throw new runtime.RequiredError(
                'to',
                'Required parameter "to" was null or undefined when calling coinsIdOhlcRange().'
            );
        }

        if (requestParameters['interval'] == null) {
            throw new runtime.RequiredError(
                'interval',
                'Required parameter "interval" was null or undefined when calling coinsIdOhlcRange().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['vsCurrency'] != null) {
            queryParameters['vs_currency'] = requestParameters['vsCurrency'];
        }

        if (requestParameters['from'] != null) {
            queryParameters['from'] = requestParameters['from'];
        }

        if (requestParameters['to'] != null) {
            queryParameters['to'] = requestParameters['to'];
        }

        if (requestParameters['interval'] != null) {
            queryParameters['interval'] = requestParameters['interval'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_pro_api_key"] = await this.configuration.apiKey("x_cg_pro_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-pro-api-key"] = await this.configuration.apiKey("x-cg-pro-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/coins/{id}/ohlc/range`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * This endpoint allows you to **get the OHLC chart (Open, High, Low, Close) of a coin within a range of timestamp based on particular coin id**.
     * ðŸ’¼ Coin OHLC Chart within Time Range by ID
     */
    async coinsIdOhlcRange(requestParameters: CoinsIdOhlcRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Array<number>>> {
        const response = await this.coinsIdOhlcRangeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to **query the coin tickers on both centralized exchange (cex) and decentralized exchange (dex) based on a particular coin id**.
     * Coin Tickers by ID
     */
    async coinsIdTickersRaw(requestParameters: CoinsIdTickersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoinsTickers>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coinsIdTickers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['exchangeIds'] != null) {
            queryParameters['exchange_ids'] = requestParameters['exchangeIds'];
        }

        if (requestParameters['includeExchangeLogo'] != null) {
            queryParameters['include_exchange_logo'] = requestParameters['includeExchangeLogo'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['depth'] != null) {
            queryParameters['depth'] = requestParameters['depth'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_pro_api_key"] = await this.configuration.apiKey("x_cg_pro_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-pro-api-key"] = await this.configuration.apiKey("x-cg-pro-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/coins/{id}/tickers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoinsTickersFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to **query the coin tickers on both centralized exchange (cex) and decentralized exchange (dex) based on a particular coin id**.
     * Coin Tickers by ID
     */
    async coinsIdTickers(requestParameters: CoinsIdTickersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoinsTickers> {
        const response = await this.coinsIdTickersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to **query historical total supply of a coin by number of days away from now based on provided coin id**
     * ðŸ‘‘ Total Supply Chart by ID
     */
    async coinsIdTotalSupplyChartRaw(requestParameters: CoinsIdTotalSupplyChartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Array<number>>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coinsIdTotalSupplyChart().'
            );
        }

        if (requestParameters['days'] == null) {
            throw new runtime.RequiredError(
                'days',
                'Required parameter "days" was null or undefined when calling coinsIdTotalSupplyChart().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['days'] != null) {
            queryParameters['days'] = requestParameters['days'];
        }

        if (requestParameters['interval'] != null) {
            queryParameters['interval'] = requestParameters['interval'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_pro_api_key"] = await this.configuration.apiKey("x_cg_pro_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-pro-api-key"] = await this.configuration.apiKey("x-cg-pro-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/coins/{id}/total_supply_chart`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * This endpoint allows you to **query historical total supply of a coin by number of days away from now based on provided coin id**
     * ðŸ‘‘ Total Supply Chart by ID
     */
    async coinsIdTotalSupplyChart(requestParameters: CoinsIdTotalSupplyChartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Array<number>>> {
        const response = await this.coinsIdTotalSupplyChartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to **query historical total supply of a coin, within a range of timestamp based on the provided coin id**
     * ðŸ‘‘ Total Supply chart within time range by ID
     */
    async coinsIdTotalSupplyChartRangeRaw(requestParameters: CoinsIdTotalSupplyChartRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Array<number>>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coinsIdTotalSupplyChartRange().'
            );
        }

        if (requestParameters['from'] == null) {
            throw new runtime.RequiredError(
                'from',
                'Required parameter "from" was null or undefined when calling coinsIdTotalSupplyChartRange().'
            );
        }

        if (requestParameters['to'] == null) {
            throw new runtime.RequiredError(
                'to',
                'Required parameter "to" was null or undefined when calling coinsIdTotalSupplyChartRange().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['from'] != null) {
            queryParameters['from'] = requestParameters['from'];
        }

        if (requestParameters['to'] != null) {
            queryParameters['to'] = requestParameters['to'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_pro_api_key"] = await this.configuration.apiKey("x_cg_pro_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-pro-api-key"] = await this.configuration.apiKey("x-cg-pro-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/coins/{id}/total_supply_chart/range`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * This endpoint allows you to **query historical total supply of a coin, within a range of timestamp based on the provided coin id**
     * ðŸ‘‘ Total Supply chart within time range by ID
     */
    async coinsIdTotalSupplyChartRange(requestParameters: CoinsIdTotalSupplyChartRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Array<number>>> {
        const response = await this.coinsIdTotalSupplyChartRangeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to **query all the supported coins on CoinGecko with coins id, name and symbol**.
     * Coins List (ID Map)
     */
    async coinsListRaw(requestParameters: CoinsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CoinsListInner>>> {
        const queryParameters: any = {};

        if (requestParameters['includePlatform'] != null) {
            queryParameters['include_platform'] = requestParameters['includePlatform'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_pro_api_key"] = await this.configuration.apiKey("x_cg_pro_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-pro-api-key"] = await this.configuration.apiKey("x-cg-pro-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/coins/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CoinsListInnerFromJSON));
    }

    /**
     * This endpoint allows you to **query all the supported coins on CoinGecko with coins id, name and symbol**.
     * Coins List (ID Map)
     */
    async coinsList(requestParameters: CoinsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CoinsListInner>> {
        const response = await this.coinsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to **query the latest 200 coins that recently listed on CoinGecko**
     * ðŸ’¼ Recently Added Coins
     */
    async coinsListNewRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CoinsListNewInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_pro_api_key"] = await this.configuration.apiKey("x_cg_pro_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-pro-api-key"] = await this.configuration.apiKey("x-cg-pro-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/coins/list/new`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CoinsListNewInnerFromJSON));
    }

    /**
     * This endpoint allows you to **query the latest 200 coins that recently listed on CoinGecko**
     * ðŸ’¼ Recently Added Coins
     */
    async coinsListNew(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CoinsListNewInner>> {
        const response = await this.coinsListNewRaw(initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to **query all the supported coins with price, market cap, volume and market related data**.
     * Coins List with Market Data
     */
    async coinsMarketsRaw(requestParameters: CoinsMarketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoinsMarkets>> {
        if (requestParameters['vsCurrency'] == null) {
            throw new runtime.RequiredError(
                'vsCurrency',
                'Required parameter "vsCurrency" was null or undefined when calling coinsMarkets().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['vsCurrency'] != null) {
            queryParameters['vs_currency'] = requestParameters['vsCurrency'];
        }

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        if (requestParameters['category'] != null) {
            queryParameters['category'] = requestParameters['category'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['per_page'] = requestParameters['perPage'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['sparkline'] != null) {
            queryParameters['sparkline'] = requestParameters['sparkline'];
        }

        if (requestParameters['priceChangePercentage'] != null) {
            queryParameters['price_change_percentage'] = requestParameters['priceChangePercentage'];
        }

        if (requestParameters['locale'] != null) {
            queryParameters['locale'] = requestParameters['locale'];
        }

        if (requestParameters['precision'] != null) {
            queryParameters['precision'] = requestParameters['precision'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_pro_api_key"] = await this.configuration.apiKey("x_cg_pro_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-pro-api-key"] = await this.configuration.apiKey("x-cg-pro-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/coins/markets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoinsMarketsFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to **query all the supported coins with price, market cap, volume and market related data**.
     * Coins List with Market Data
     */
    async coinsMarkets(requestParameters: CoinsMarketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoinsMarkets> {
        const response = await this.coinsMarketsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to **query the top 30 coins with largest price gain and loss by a specific time duration**
     * ðŸ’¼ Top Gainers & Losers
     */
    async coinsTopGainersLosersRaw(requestParameters: CoinsTopGainersLosersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TopGainersLosersInner>>> {
        if (requestParameters['vsCurrency'] == null) {
            throw new runtime.RequiredError(
                'vsCurrency',
                'Required parameter "vsCurrency" was null or undefined when calling coinsTopGainersLosers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['vsCurrency'] != null) {
            queryParameters['vs_currency'] = requestParameters['vsCurrency'];
        }

        if (requestParameters['duration'] != null) {
            queryParameters['duration'] = requestParameters['duration'];
        }

        if (requestParameters['topCoins'] != null) {
            queryParameters['top_coins'] = requestParameters['topCoins'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_pro_api_key"] = await this.configuration.apiKey("x_cg_pro_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-pro-api-key"] = await this.configuration.apiKey("x-cg-pro-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/coins/top_gainers_losers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TopGainersLosersInnerFromJSON));
    }

    /**
     * This endpoint allows you to **query the top 30 coins with largest price gain and loss by a specific time duration**
     * ðŸ’¼ Top Gainers & Losers
     */
    async coinsTopGainersLosers(requestParameters: CoinsTopGainersLosersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TopGainersLosersInner>> {
        const response = await this.coinsTopGainersLosersRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CoinsIdCirculatingSupplyChartIntervalEnum = {
    Daily: 'daily'
} as const;
export type CoinsIdCirculatingSupplyChartIntervalEnum = typeof CoinsIdCirculatingSupplyChartIntervalEnum[keyof typeof CoinsIdCirculatingSupplyChartIntervalEnum];
/**
 * @export
 */
export const CoinsIdMarketChartIntervalEnum = {
    _5m: '5m',
    Hourly: 'hourly',
    Daily: 'daily'
} as const;
export type CoinsIdMarketChartIntervalEnum = typeof CoinsIdMarketChartIntervalEnum[keyof typeof CoinsIdMarketChartIntervalEnum];
/**
 * @export
 */
export const CoinsIdMarketChartPrecisionEnum = {
    Full: 'full',
    _0: '0',
    _1: '1',
    _2: '2',
    _3: '3',
    _4: '4',
    _5: '5',
    _6: '6',
    _7: '7',
    _8: '8',
    _9: '9',
    _10: '10',
    _11: '11',
    _12: '12',
    _13: '13',
    _14: '14',
    _15: '15',
    _16: '16',
    _17: '17',
    _18: '18'
} as const;
export type CoinsIdMarketChartPrecisionEnum = typeof CoinsIdMarketChartPrecisionEnum[keyof typeof CoinsIdMarketChartPrecisionEnum];
/**
 * @export
 */
export const CoinsIdMarketChartRangeIntervalEnum = {
    _5m: '5m',
    Hourly: 'hourly',
    Daily: 'daily'
} as const;
export type CoinsIdMarketChartRangeIntervalEnum = typeof CoinsIdMarketChartRangeIntervalEnum[keyof typeof CoinsIdMarketChartRangeIntervalEnum];
/**
 * @export
 */
export const CoinsIdMarketChartRangePrecisionEnum = {
    Full: 'full',
    _0: '0',
    _1: '1',
    _2: '2',
    _3: '3',
    _4: '4',
    _5: '5',
    _6: '6',
    _7: '7',
    _8: '8',
    _9: '9',
    _10: '10',
    _11: '11',
    _12: '12',
    _13: '13',
    _14: '14',
    _15: '15',
    _16: '16',
    _17: '17',
    _18: '18'
} as const;
export type CoinsIdMarketChartRangePrecisionEnum = typeof CoinsIdMarketChartRangePrecisionEnum[keyof typeof CoinsIdMarketChartRangePrecisionEnum];
/**
 * @export
 */
export const CoinsIdOhlcDaysEnum = {
    _1: '1',
    _7: '7',
    _14: '14',
    _30: '30',
    _90: '90',
    _180: '180',
    _365: '365',
    Max: 'max'
} as const;
export type CoinsIdOhlcDaysEnum = typeof CoinsIdOhlcDaysEnum[keyof typeof CoinsIdOhlcDaysEnum];
/**
 * @export
 */
export const CoinsIdOhlcIntervalEnum = {
    Daily: 'daily',
    Hourly: 'hourly'
} as const;
export type CoinsIdOhlcIntervalEnum = typeof CoinsIdOhlcIntervalEnum[keyof typeof CoinsIdOhlcIntervalEnum];
/**
 * @export
 */
export const CoinsIdOhlcPrecisionEnum = {
    Full: 'full',
    _0: '0',
    _1: '1',
    _2: '2',
    _3: '3',
    _4: '4',
    _5: '5',
    _6: '6',
    _7: '7',
    _8: '8',
    _9: '9',
    _10: '10',
    _11: '11',
    _12: '12',
    _13: '13',
    _14: '14',
    _15: '15',
    _16: '16',
    _17: '17',
    _18: '18'
} as const;
export type CoinsIdOhlcPrecisionEnum = typeof CoinsIdOhlcPrecisionEnum[keyof typeof CoinsIdOhlcPrecisionEnum];
/**
 * @export
 */
export const CoinsIdOhlcRangeIntervalEnum = {
    Daily: 'daily',
    Hourly: 'hourly'
} as const;
export type CoinsIdOhlcRangeIntervalEnum = typeof CoinsIdOhlcRangeIntervalEnum[keyof typeof CoinsIdOhlcRangeIntervalEnum];
/**
 * @export
 */
export const CoinsIdTickersOrderEnum = {
    TrustScoreDesc: 'trust_score_desc',
    TrustScoreAsc: 'trust_score_asc',
    VolumeDesc: 'volume_desc',
    VolumeAsc: 'volume_asc'
} as const;
export type CoinsIdTickersOrderEnum = typeof CoinsIdTickersOrderEnum[keyof typeof CoinsIdTickersOrderEnum];
/**
 * @export
 */
export const CoinsIdTotalSupplyChartIntervalEnum = {
    Daily: 'daily'
} as const;
export type CoinsIdTotalSupplyChartIntervalEnum = typeof CoinsIdTotalSupplyChartIntervalEnum[keyof typeof CoinsIdTotalSupplyChartIntervalEnum];
/**
 * @export
 */
export const CoinsListStatusEnum = {
    Active: 'active',
    Inactive: 'inactive'
} as const;
export type CoinsListStatusEnum = typeof CoinsListStatusEnum[keyof typeof CoinsListStatusEnum];
/**
 * @export
 */
export const CoinsMarketsOrderEnum = {
    MarketCapAsc: 'market_cap_asc',
    MarketCapDesc: 'market_cap_desc',
    VolumeAsc: 'volume_asc',
    VolumeDesc: 'volume_desc',
    IdAsc: 'id_asc',
    IdDesc: 'id_desc'
} as const;
export type CoinsMarketsOrderEnum = typeof CoinsMarketsOrderEnum[keyof typeof CoinsMarketsOrderEnum];
/**
 * @export
 */
export const CoinsMarketsLocaleEnum = {
    Ar: 'ar',
    Bg: 'bg',
    Cs: 'cs',
    Da: 'da',
    De: 'de',
    El: 'el',
    En: 'en',
    Es: 'es',
    Fi: 'fi',
    Fr: 'fr',
    He: 'he',
    Hi: 'hi',
    Hr: 'hr',
    Hu: 'hu',
    Id: 'id',
    It: 'it',
    Ja: 'ja',
    Ko: 'ko',
    Lt: 'lt',
    Nl: 'nl',
    No: 'no',
    Pl: 'pl',
    Pt: 'pt',
    Ro: 'ro',
    Ru: 'ru',
    Sk: 'sk',
    Sl: 'sl',
    Sv: 'sv',
    Th: 'th',
    Tr: 'tr',
    Uk: 'uk',
    Vi: 'vi',
    Zh: 'zh',
    ZhTw: 'zh-tw'
} as const;
export type CoinsMarketsLocaleEnum = typeof CoinsMarketsLocaleEnum[keyof typeof CoinsMarketsLocaleEnum];
/**
 * @export
 */
export const CoinsMarketsPrecisionEnum = {
    Full: 'full',
    _0: '0',
    _1: '1',
    _2: '2',
    _3: '3',
    _4: '4',
    _5: '5',
    _6: '6',
    _7: '7',
    _8: '8',
    _9: '9',
    _10: '10',
    _11: '11',
    _12: '12',
    _13: '13',
    _14: '14',
    _15: '15',
    _16: '16',
    _17: '17',
    _18: '18'
} as const;
export type CoinsMarketsPrecisionEnum = typeof CoinsMarketsPrecisionEnum[keyof typeof CoinsMarketsPrecisionEnum];
/**
 * @export
 */
export const CoinsTopGainersLosersDurationEnum = {
    _1h: '1h',
    _24h: '24h',
    _7d: '7d',
    _14d: '14d',
    _30d: '30d',
    _60d: '60d',
    _1y: '1y'
} as const;
export type CoinsTopGainersLosersDurationEnum = typeof CoinsTopGainersLosersDurationEnum[keyof typeof CoinsTopGainersLosersDurationEnum];
/**
 * @export
 */
export const CoinsTopGainersLosersTopCoinsEnum = {
    _300: '300',
    _500: '500',
    _1000: '1000',
    All: 'all'
} as const;
export type CoinsTopGainersLosersTopCoinsEnum = typeof CoinsTopGainersLosersTopCoinsEnum[keyof typeof CoinsTopGainersLosersTopCoinsEnum];
