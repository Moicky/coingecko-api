/* tslint:disable */
/* eslint-disable */
/**
 * On Chain DEX API (Beta)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Pool,
  PoolTokensInfo,
  Token,
  TokenInfo,
  TokenInfoRecentlyUpdated,
} from '../models/index';
import {
    PoolFromJSON,
    PoolToJSON,
    PoolTokensInfoFromJSON,
    PoolTokensInfoToJSON,
    TokenFromJSON,
    TokenToJSON,
    TokenInfoFromJSON,
    TokenInfoToJSON,
    TokenInfoRecentlyUpdatedFromJSON,
    TokenInfoRecentlyUpdatedToJSON,
} from '../models/index';

export interface PoolTokenInfoContractAddressRequest {
    network: string;
    poolAddress: string;
}

export interface TokenDataContractAddressRequest {
    network: string;
    address: string;
    include?: TokenDataContractAddressIncludeEnum;
}

export interface TokenInfoContractAddressRequest {
    network: string;
    address: string;
}

export interface TokensDataContractAddressesRequest {
    network: string;
    addresses: string;
    include?: TokensDataContractAddressesIncludeEnum;
}

export interface TokensInfoRecentUpdatedRequest {
    include?: TokensInfoRecentUpdatedIncludeEnum;
    network?: string;
}

export interface TopPoolsContractAddressRequest {
    network: string;
    tokenAddress: string;
    include?: string;
    page?: number;
    sort?: TopPoolsContractAddressSortEnum;
}

/**
 * TokensApi - interface
 * 
 * @export
 * @interface TokensApiInterface
 */
export interface TokensApiInterface {
    /**
     * This endpoint allows you to **query pool info including base and quote token info based on provided pool contract address on a network**
     * @summary Pool Tokens Info by Pool Address
     * @param {string} network network id  &lt;br&gt; *refers to [/networks](/reference/networks-list) 
     * @param {string} poolAddress pool contract address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApiInterface
     */
    poolTokenInfoContractAddressRaw(requestParameters: PoolTokenInfoContractAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PoolTokensInfo>>;

    /**
     * This endpoint allows you to **query pool info including base and quote token info based on provided pool contract address on a network**
     * Pool Tokens Info by Pool Address
     */
    poolTokenInfoContractAddress(requestParameters: PoolTokenInfoContractAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PoolTokensInfo>;

    /**
     * This endpoint allows you to **query specific token data based on the provided token contract address on a network**
     * @summary Token Data by Token Address
     * @param {string} network network id  &lt;br&gt; *refers to [/networks](/reference/networks-list) 
     * @param {string} address token contract address
     * @param {'top_pools'} [include] attributes to include
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApiInterface
     */
    tokenDataContractAddressRaw(requestParameters: TokenDataContractAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Token>>;

    /**
     * This endpoint allows you to **query specific token data based on the provided token contract address on a network**
     * Token Data by Token Address
     */
    tokenDataContractAddress(requestParameters: TokenDataContractAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Token>;

    /**
     * This endpoint allows you to **query specific token info such as name,symbol, coingecko id etc. based on provided token contract address on a network**
     * @summary Token Info by Token Address
     * @param {string} network network id  &lt;br&gt; *refers to [/networks](/reference/networks-list) 
     * @param {string} address token contract address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApiInterface
     */
    tokenInfoContractAddressRaw(requestParameters: TokenInfoContractAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenInfo>>;

    /**
     * This endpoint allows you to **query specific token info such as name,symbol, coingecko id etc. based on provided token contract address on a network**
     * Token Info by Token Address
     */
    tokenInfoContractAddress(requestParameters: TokenInfoContractAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenInfo>;

    /**
     * This endpoint allows you to **query multiple tokens data based on the provided token contract addresses on a network**
     * @summary Tokens Data by Token Addresses
     * @param {string} network network id  &lt;br&gt; *refers to [/networks](/reference/networks-list) 
     * @param {string} addresses token contract address, comma-separated if more than one token contract address
     * @param {'top_pools'} [include] attributes to include
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApiInterface
     */
    tokensDataContractAddressesRaw(requestParameters: TokensDataContractAddressesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Token>>;

    /**
     * This endpoint allows you to **query multiple tokens data based on the provided token contract addresses on a network**
     * Tokens Data by Token Addresses
     */
    tokensDataContractAddresses(requestParameters: TokensDataContractAddressesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Token>;

    /**
     * This endpoint allows you to **query 100 most recently updated tokens info of a specific network or across all networks on GeckoTerminal**
     * @summary Most Recently Updated Tokens List
     * @param {'network'} [include] Attributes for related resources to include, which will be returned under the top-level \&#39;included\&#39; key
     * @param {string} [network] Filter tokens by provided network  &lt;br&gt; *refers to [/networks](/reference/networks-list) 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApiInterface
     */
    tokensInfoRecentUpdatedRaw(requestParameters: TokensInfoRecentUpdatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenInfoRecentlyUpdated>>;

    /**
     * This endpoint allows you to **query 100 most recently updated tokens info of a specific network or across all networks on GeckoTerminal**
     * Most Recently Updated Tokens List
     */
    tokensInfoRecentUpdated(requestParameters: TokensInfoRecentUpdatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenInfoRecentlyUpdated>;

    /**
     * This endpoint allows you to **query top pools based on the provided token contract address on a network**
     * @summary Top Pools by Token Address
     * @param {string} network network id &lt;br&gt; *refers to [/networks](/reference/networks-list)
     * @param {string} tokenAddress token contract address
     * @param {string} [include] attributes to include, comma-separated if more than one to include &lt;br&gt; Available values: &#x60;base_token&#x60;, &#x60;quote_token&#x60;, &#x60;dex&#x60;
     * @param {number} [page] page through results, maximum 10 pages &lt;br&gt; Default value: 1
     * @param {'h24_volume_usd_liquidity_desc' | 'h24_tx_count_desc' | 'h24_volume_usd_desc'} [sort] sort the pools by field &lt;br&gt; Default value: h24_volume_usd_liquidity_desc
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApiInterface
     */
    topPoolsContractAddressRaw(requestParameters: TopPoolsContractAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pool>>;

    /**
     * This endpoint allows you to **query top pools based on the provided token contract address on a network**
     * Top Pools by Token Address
     */
    topPoolsContractAddress(requestParameters: TopPoolsContractAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pool>;

}

/**
 * 
 */
export class TokensApi extends runtime.BaseAPI implements TokensApiInterface {

    /**
     * This endpoint allows you to **query pool info including base and quote token info based on provided pool contract address on a network**
     * Pool Tokens Info by Pool Address
     */
    async poolTokenInfoContractAddressRaw(requestParameters: PoolTokenInfoContractAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PoolTokensInfo>> {
        if (requestParameters['network'] == null) {
            throw new runtime.RequiredError(
                'network',
                'Required parameter "network" was null or undefined when calling poolTokenInfoContractAddress().'
            );
        }

        if (requestParameters['poolAddress'] == null) {
            throw new runtime.RequiredError(
                'poolAddress',
                'Required parameter "poolAddress" was null or undefined when calling poolTokenInfoContractAddress().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_pro_api_key"] = await this.configuration.apiKey("x_cg_pro_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-pro-api-key"] = await this.configuration.apiKey("x-cg-pro-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/networks/{network}/pools/{pool_address}/info`.replace(`{${"network"}}`, encodeURIComponent(String(requestParameters['network']))).replace(`{${"pool_address"}}`, encodeURIComponent(String(requestParameters['poolAddress']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PoolTokensInfoFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to **query pool info including base and quote token info based on provided pool contract address on a network**
     * Pool Tokens Info by Pool Address
     */
    async poolTokenInfoContractAddress(requestParameters: PoolTokenInfoContractAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PoolTokensInfo> {
        const response = await this.poolTokenInfoContractAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to **query specific token data based on the provided token contract address on a network**
     * Token Data by Token Address
     */
    async tokenDataContractAddressRaw(requestParameters: TokenDataContractAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Token>> {
        if (requestParameters['network'] == null) {
            throw new runtime.RequiredError(
                'network',
                'Required parameter "network" was null or undefined when calling tokenDataContractAddress().'
            );
        }

        if (requestParameters['address'] == null) {
            throw new runtime.RequiredError(
                'address',
                'Required parameter "address" was null or undefined when calling tokenDataContractAddress().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_pro_api_key"] = await this.configuration.apiKey("x_cg_pro_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-pro-api-key"] = await this.configuration.apiKey("x-cg-pro-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/networks/{network}/tokens/{address}`.replace(`{${"network"}}`, encodeURIComponent(String(requestParameters['network']))).replace(`{${"address"}}`, encodeURIComponent(String(requestParameters['address']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to **query specific token data based on the provided token contract address on a network**
     * Token Data by Token Address
     */
    async tokenDataContractAddress(requestParameters: TokenDataContractAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Token> {
        const response = await this.tokenDataContractAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to **query specific token info such as name,symbol, coingecko id etc. based on provided token contract address on a network**
     * Token Info by Token Address
     */
    async tokenInfoContractAddressRaw(requestParameters: TokenInfoContractAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenInfo>> {
        if (requestParameters['network'] == null) {
            throw new runtime.RequiredError(
                'network',
                'Required parameter "network" was null or undefined when calling tokenInfoContractAddress().'
            );
        }

        if (requestParameters['address'] == null) {
            throw new runtime.RequiredError(
                'address',
                'Required parameter "address" was null or undefined when calling tokenInfoContractAddress().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_pro_api_key"] = await this.configuration.apiKey("x_cg_pro_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-pro-api-key"] = await this.configuration.apiKey("x-cg-pro-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/networks/{network}/tokens/{address}/info`.replace(`{${"network"}}`, encodeURIComponent(String(requestParameters['network']))).replace(`{${"address"}}`, encodeURIComponent(String(requestParameters['address']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenInfoFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to **query specific token info such as name,symbol, coingecko id etc. based on provided token contract address on a network**
     * Token Info by Token Address
     */
    async tokenInfoContractAddress(requestParameters: TokenInfoContractAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenInfo> {
        const response = await this.tokenInfoContractAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to **query multiple tokens data based on the provided token contract addresses on a network**
     * Tokens Data by Token Addresses
     */
    async tokensDataContractAddressesRaw(requestParameters: TokensDataContractAddressesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Token>> {
        if (requestParameters['network'] == null) {
            throw new runtime.RequiredError(
                'network',
                'Required parameter "network" was null or undefined when calling tokensDataContractAddresses().'
            );
        }

        if (requestParameters['addresses'] == null) {
            throw new runtime.RequiredError(
                'addresses',
                'Required parameter "addresses" was null or undefined when calling tokensDataContractAddresses().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_pro_api_key"] = await this.configuration.apiKey("x_cg_pro_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-pro-api-key"] = await this.configuration.apiKey("x-cg-pro-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/networks/{network}/tokens/multi/{addresses}`.replace(`{${"network"}}`, encodeURIComponent(String(requestParameters['network']))).replace(`{${"addresses"}}`, encodeURIComponent(String(requestParameters['addresses']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to **query multiple tokens data based on the provided token contract addresses on a network**
     * Tokens Data by Token Addresses
     */
    async tokensDataContractAddresses(requestParameters: TokensDataContractAddressesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Token> {
        const response = await this.tokensDataContractAddressesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to **query 100 most recently updated tokens info of a specific network or across all networks on GeckoTerminal**
     * Most Recently Updated Tokens List
     */
    async tokensInfoRecentUpdatedRaw(requestParameters: TokensInfoRecentUpdatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenInfoRecentlyUpdated>> {
        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        if (requestParameters['network'] != null) {
            queryParameters['network'] = requestParameters['network'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_pro_api_key"] = await this.configuration.apiKey("x_cg_pro_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-pro-api-key"] = await this.configuration.apiKey("x-cg-pro-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/tokens/info_recently_updated`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenInfoRecentlyUpdatedFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to **query 100 most recently updated tokens info of a specific network or across all networks on GeckoTerminal**
     * Most Recently Updated Tokens List
     */
    async tokensInfoRecentUpdated(requestParameters: TokensInfoRecentUpdatedRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenInfoRecentlyUpdated> {
        const response = await this.tokensInfoRecentUpdatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to **query top pools based on the provided token contract address on a network**
     * Top Pools by Token Address
     */
    async topPoolsContractAddressRaw(requestParameters: TopPoolsContractAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pool>> {
        if (requestParameters['network'] == null) {
            throw new runtime.RequiredError(
                'network',
                'Required parameter "network" was null or undefined when calling topPoolsContractAddress().'
            );
        }

        if (requestParameters['tokenAddress'] == null) {
            throw new runtime.RequiredError(
                'tokenAddress',
                'Required parameter "tokenAddress" was null or undefined when calling topPoolsContractAddress().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["x_cg_pro_api_key"] = await this.configuration.apiKey("x_cg_pro_api_key"); // apiKeyQueryParam authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-cg-pro-api-key"] = await this.configuration.apiKey("x-cg-pro-api-key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/networks/{network}/tokens/{token_address}/pools`.replace(`{${"network"}}`, encodeURIComponent(String(requestParameters['network']))).replace(`{${"token_address"}}`, encodeURIComponent(String(requestParameters['tokenAddress']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PoolFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to **query top pools based on the provided token contract address on a network**
     * Top Pools by Token Address
     */
    async topPoolsContractAddress(requestParameters: TopPoolsContractAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pool> {
        const response = await this.topPoolsContractAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const TokenDataContractAddressIncludeEnum = {
    TopPools: 'top_pools'
} as const;
export type TokenDataContractAddressIncludeEnum = typeof TokenDataContractAddressIncludeEnum[keyof typeof TokenDataContractAddressIncludeEnum];
/**
 * @export
 */
export const TokensDataContractAddressesIncludeEnum = {
    TopPools: 'top_pools'
} as const;
export type TokensDataContractAddressesIncludeEnum = typeof TokensDataContractAddressesIncludeEnum[keyof typeof TokensDataContractAddressesIncludeEnum];
/**
 * @export
 */
export const TokensInfoRecentUpdatedIncludeEnum = {
    Network: 'network'
} as const;
export type TokensInfoRecentUpdatedIncludeEnum = typeof TokensInfoRecentUpdatedIncludeEnum[keyof typeof TokensInfoRecentUpdatedIncludeEnum];
/**
 * @export
 */
export const TopPoolsContractAddressSortEnum = {
    VolumeUsdLiquidityDesc: 'h24_volume_usd_liquidity_desc',
    TxCountDesc: 'h24_tx_count_desc',
    VolumeUsdDesc: 'h24_volume_usd_desc'
} as const;
export type TopPoolsContractAddressSortEnum = typeof TopPoolsContractAddressSortEnum[keyof typeof TopPoolsContractAddressSortEnum];
